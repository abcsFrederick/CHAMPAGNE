{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#champagne","title":"CHAMPAGNE \ud83c\udf7e","text":"<p>CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline</p> <p> </p> <p>\ud83d\udea7 This project is under active development. It is not yet ready for production use. \ud83d\udea7</p>"},{"location":"#set-up","title":"Set up","text":"<p>Champagne is installed on the Biowulf HPC. For installation in other execution environments, refer to the docs.</p>"},{"location":"#biowulf","title":"Biowulf","text":"<p>Champagne is available on Biowulf in the <code>ccbrpipeliner</code> module. You'll first need to start an interactive session and create a directory from where you'll run champagne.</p> <pre><code># start an interactive node\nsinteractive --mem=2g --cpus-per-task=2 --gres=lscratch:200\n# make a working directory for your project and go to it\nmkdir -p /data/$USER/chipseq\ncd /data/$USER/chipseq\n# load the ccbrpipeliener module\nmodule load ccbrpipeliner\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Initialize and run champagne with test data:</p> <pre><code># copy the champagne config files to your current directory\nchampagne init\n# preview the champagne jobs that will run with the test dataset\nchampagne run --mode local -profile test -preview\n# launch a champagne run on slurm with the test dataset\nchampagne run --mode slurm -profile test,biowulf\n</code></pre> <p>To run champagne on your own data, you'll need to create a sample sheet. Take a look at these examples:</p> <ul> <li>assets/samplesheet_test.csv - mix of single and paired end reads downloaded from github.</li> <li>assets/samplesheet_mm10.csv - single end reads on biowulf.</li> </ul> <p>Once you've created a samplesheet with paths to your fastq files, run champagne with the <code>--input</code> option to specify the path to your sample sheet:</p> <pre><code>champagne run --mode slurm -profile biowulf --input samplesheet.csv --genome hg38\n</code></pre> <p>We currently support the hg38 and mm10 genomes. If you'd like to use a custom genome, you'll need the following files:</p> <ul> <li>genome fasta</li> <li>genome GTF</li> <li>blacklist fasta</li> </ul> <p>Prepare your custom reference genome with:</p> <pre><code>champagne run --mode slurm -profile biowulf \\\n    -entry MAKE_REFERENCE \\\n    --outdir custom_genome \\\n    --genome custom_genome \\\n    --genome_fasta genome.fasta \\\n    --genes_gtf genome.gtf \\\n    --blacklist blacklist.fasta\n</code></pre> <p>The reference files and a config file for the genome will be written in <code>custom_genome/genome</code>.</p> <p>Then you can run champagne using your custom genome:</p> <pre><code>champagne run --mode slurm -profile biowulf \\\n    --input samplesheet.csv \\\n    --genome custom_genome \\\n    -c custom_genome/genome/custom_genome.config\n</code></pre>"},{"location":"#help-contributing","title":"Help &amp; Contributing","text":"<p>Come across a bug? Open an issue and include a minimal reproducible example.</p> <p>Have a question? Ask it in discussions.</p> <p>Want to contribute to this project? Check out the contributing guidelines.</p>"},{"location":"#references","title":"References","text":"<p>This repo was originally generated from the CCBR Nextflow Template. The template takes inspiration from nektool<sup>1</sup> and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions<sup>2</sup>.</p> <p>Information on who the pipeline was developed for, and a statement if it's only been tested on Biowulf. For example:</p> <p>It has been developed and tested solely on NIH HPC Biowulf.</p> <p>Also include a workflow image to summarize the pipeline.</p> <ol> <li> <p>nektool https://github.com/beardymcjohnface/nektool \u21a9</p> </li> <li> <p>instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#champagne-development-version","title":"CHAMPAGNE development version","text":"<ul> <li>Contrasts are now specified as a TSV file instead of YAML. (#224, @kelly-sovacool)</li> <li>See the example contrast sheets in <code>assets/</code>.</li> <li>Refactor checks for the sample sheet &amp; contrast sheet to prevent unnecessary re-running. (#224, @kelly-sovacool)</li> <li>Set <code>publish_dir_mode</code> to <code>link</code> by default.</li> <li>Set <code>process.cache</code> to <code>deep</code> by default rather than lenient. (#224, @kelly-sovacool)</li> <li>Fix a file name clash during input pooling. (#224, @kelly-sovacool)</li> <li>Use <code>nextflow run -resume</code> by default, or turn it off with <code>champagne run --forceall</code>. (#224, @kelly-sovacool)</li> <li>Enable the nextflow timeline &amp; trace reports by default. (#226, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#champagne-041","title":"CHAMPAGNE 0.4.1","text":"<ul> <li>The CHAMPAGNE nextflow workflow now has a version entry in <code>nextflow.config</code>, in compliance with nf-core. (#213, @kelly-sovacool)</li> <li>Pool input (control) reads of the same sample name by default. Any inputs that should not be pooled must have different sample names in the samplesheet. (#214, @kelly-sovacool)</li> <li>Add histone samples to the <code>test_human</code> dataset. (#215, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#champagne-040","title":"CHAMPAGNE 0.4.0","text":""},{"location":"changelog/#new-features","title":"New features","text":"<ul> <li>Create a script (<code>bin/champagne</code>) to provide an interface to the champagne CLI that works out-of-the-box without the need to install the python package with <code>pip</code>. (#180, @kelly-sovacool)</li> <li>However, any dependencies not in the Python Standard Library must be installed for this to work. See the dependencies list in <code>pyproject.toml</code>.</li> <li>Allow additional columns in the sample sheet beyond the minimum required header. (#176, @kelly-sovacool)</li> <li>Add a workflow entry point to download fastq files from SRA. (#176, @kelly-sovacool)</li> <li>Add <code>test_human</code> profile with chipseq data from ENCODE. (#176, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix configuration files for compatibility with using the GitHub repo as the source. (#173, @kelly-sovacool)</li> <li>These equivalent commands now work:     <pre><code>nextflow run CCBR/CHAMPAGNE\nchampagne run --main CCBR/CHAMPAGNE\n</code></pre></li> <li>Allow multiple samples to use the same input. (#176, @kelly-sovacool)</li> <li>In the biowulf config profile, switch variable $SLURM_JOBID to $SLURM_JOB_ID. (@kelly-sovacool)</li> <li>Increase resource allocations for chipseeker and deeptools. (#192, @slsevilla)</li> <li>Check the validity of the contrastsheet earlier on in the workflow. (#192, @slsevilla; #200, @kelly-sovacool)</li> <li>Fix bug where <code>manorm</code> was using R1 twice instead of R1 and R2. (#206, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>Change the peak widths histogram type from overlay to stack. (#176, @kelly-sovacool)</li> <li>Documentation improvements. (#192, @slsevilla)</li> </ul>"},{"location":"changelog/#champagne-030","title":"CHAMPAGNE 0.3.0","text":""},{"location":"changelog/#new-features_1","title":"New features","text":"<ul> <li>Find motifs in the genome with Homer. (#142)</li> <li>Run motif enrichment analysis with MEME. (#142)</li> <li>Annotate peaks with chipseeker. (#142,#147,#157)</li> <li>Add preseq complexity curve and fastq screen to multiqc report. (#147)</li> <li>Support multiple replicates per sample and call consensus peaks on replicates. (#129)</li> <li>Optionally normalize p-values with the CCBR/consensus_peaks subworkflow.</li> <li>Implement differential peak calling. (#158)</li> <li>Optionally specify contrasts via a YAML file. If no file is specified, differential analysis is not performed.</li> <li>If any sample has only one replicate, run <code>MAnorm</code>, otherwise run <code>diffbind</code>.</li> <li>Print the recommended citation in bibtex format with <code>champagne --citation</code>. (#153)</li> <li>CHAMPAGNE is also now archived in Zenodo with DOI <code>10.5281/zenodo.10516078</code>.</li> <li>The docs website now has a dropdown menu to select which version to view. The latest release is shown by default. (#170)</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>Fix deepTools plots (#144):</li> <li>Per sample fingerprint plots instead of per replicate.</li> <li>Input normalized profile plots.</li> <li>Protein-coding-only versions of plots.</li> <li>Ensure sample IDs are sorted. (#150)</li> <li>Fix a bug where the wrong SICER output file was used for downstream analyses. (#155)</li> <li>Fix CLI profile on machines other than biowulf &amp; FRCE. (#168)</li> <li>Fix broken bold styling in documentation website. (#53)</li> </ul>"},{"location":"changelog/#champagne-022","title":"CHAMPAGNE 0.2.2","text":"<ul> <li>Fix permissions issues in the CLI. (#167)</li> </ul>"},{"location":"changelog/#champagne-021","title":"CHAMPAGNE 0.2.1","text":"<ul> <li>Fix a bug in QC stats that mixed up the statistics for different samples. (#125)</li> <li>Fix a bug in the CLI that added the <code>-profile</code> to the nextflow command even if it wasn't needed (#125).</li> <li>Report read counts between blacklist &amp; filtering steps in the QC table. (#125)</li> <li>Run spooker on workflow completion (#126).</li> </ul>"},{"location":"changelog/#champagne-020","title":"CHAMPAGNE 0.2.0","text":""},{"location":"changelog/#new-features_2","title":"New features","text":"<ul> <li>Implement peak calling with sicer2, macs2, and gem. (#52)</li> <li>Add parameter options to skip QC, input normalization, and/or peak calling steps. (#72)</li> <li>Calculate and plot QC metrics for called peaks:</li> <li>Fraction in Peaks (FRiP) (#89)</li> <li>Jaccard index (#92)</li> <li>Histogram of peak widths (#92)</li> <li>Add support for paired-end reads. (#105)</li> <li>Add an option to use a custom reference from a genome fasta, gtf, and blacklist file. (#105)</li> <li>Champagne CLI: (#112)</li> <li>New <code>--mode</code> option for <code>champagne run</code> to execute the workflow locally ('local') or submit it as a slurm job ('slurm').</li> <li>Option to override the path to the champagne <code>main.nf</code> file or specify the github repo (<code>CCBR/CHAMPAGNE</code>) instead.     <pre><code># use the default path\nchampagne run ...\n# override the path\nchampagne run path/to/champagne/main.nf\n# use a revision from github instead\nchampagne run CCBR/CHAMPAGNE -r v0.1.0\n</code></pre></li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>CLI:</li> <li>Error when biowulf-specific environment variables are not defined. (#54)</li> <li>The host is now correctly detected as biowulf via <code>scontrol</code>. (#75)</li> <li>Containers:</li> <li>Containers are now specified in process definitions instead of <code>withName</code>/<code>withLabel</code> for better control. (#69)<ul> <li>Shared containers are specified as parameters in the config file <code>conf/containers.config</code>.</li> </ul> </li> <li>No longer use <code>--mount type=bind</code> or <code>--volume</code> for making directories available to processes in containers. Instead, use Nextflow's <code>Channel.fromPath</code> constructor with <code>type: 'dir'</code>. (#71)</li> </ul>"},{"location":"changelog/#api-breaking-changes","title":"API-breaking changes","text":"<ul> <li>An error is thrown when a required input file doesn't exist. (#71)</li> <li>Previously, the workflow quietly didn't run the process(es) that required the missing file.</li> <li>Renamed <code>champagne config</code> to <code>champagne init</code> to avoid clashing with <code>nextflow config</code>. (#112)</li> </ul>"},{"location":"changelog/#champagne-010","title":"CHAMPAGNE 0.1.0","text":""},{"location":"changelog/#quality-control-steps-implemented-for-single-end-reads","title":"Quality control steps implemented for single-end reads","text":"<ul> <li>Trim raw reads, FastQC on raw and trimmed reads, and FastQ Screen on trimmed reads.</li> <li>Exclude reads that align to blacklist regions, align remaining reads to the reference genome, and deduplicate.</li> <li>Preseq on aligned reads.</li> <li>Phantompeakqualtools on aligned and deduplicated reads.</li> <li>Process reads with deepTools: bam coverage to generate bigwigs for each sample, summarize all bigwigs, and compute matrices relative to TSSs and scaled to metagene regions.</li> <li>Generate plots with deepTools: PCA, profile, heatmap, spearman correlation, and fingerprint plots.</li> <li>Summarize all quality control steps in a MultiQC report.</li> <li>Input-normalize ChIP fragments for the next stage of the pipeline.</li> </ul>"},{"location":"contributing/","title":"Contributing to CHAMPAGNE","text":""},{"location":"contributing/#proposing-changes-with-issues","title":"Proposing changes with issues","text":"<p>If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed.</p> <p>If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it.</p>"},{"location":"contributing/#pull-request-process","title":"Pull request process","text":"<p>We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to CHAMPAGNE.</p> <p></p>"},{"location":"contributing/#clone-the-repo","title":"Clone the repo","text":"<p>If you are a member of CCBR, you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once.</p> <pre><code>git clone https://github.com/CCBR/CHAMPAGNE\n</code></pre> <p>Cloning into 'CHAMPAGNE'...  remote: Enumerating objects: 1136, done.  remote: Counting objects: 100% (463/463), done.  remote: Compressing objects: 100% (357/357), done.  remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673  Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done.  Resolving deltas: 100% (530/530), done. </p> <pre><code>cd CHAMPAGNE\n</code></pre>"},{"location":"contributing/#if-this-is-your-first-time-cloning-the-repo-you-may-need-to-install-dependencies","title":"If this is your first time cloning the repo, you may need to install dependencies","text":"<ul> <li> <p>Install nextflow and singularity or docker if needed (biowulf already has these available as modules).</p> </li> <li> <p>Install the python dependencies with pip</p> </li> </ul> <pre><code>pip install .\n</code></pre> <p>If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed</p> <pre><code>. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n</code></pre> <ul> <li>Install <code>pre-commit</code> if you don't already   have it. Then from the repo's root directory, run</li> </ul> <pre><code>pre-commit install\n</code></pre> <p>This will install the repo's pre-commit hooks.   You'll only need to do this step the first time you clone the repo.</p>"},{"location":"contributing/#create-a-branch","title":"Create a branch","text":"<p>Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as <code>iss-10</code> if it is for a specific issue.</p> <pre><code># create a new branch and switch to it\ngit branch iss-10\ngit switch iss-10\n</code></pre> <p>Switched to a new branch 'iss-10'</p>"},{"location":"contributing/#make-your-changes","title":"Make your changes","text":"<p>Edit the code, write and run tests, and update the documentation as needed.</p>"},{"location":"contributing/#test","title":"test","text":"<p>Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the <code>tests/</code> subdirectory. Run the tests with <code>python -m pytest</code>.</p> <p>If you change the workflow, please run the workflow with the test profile and make sure your new feature or bug fix works as intended.</p>"},{"location":"contributing/#document","title":"document","text":"<p>If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in <code>docs/</code>.</p>"},{"location":"contributing/#commit-and-push-your-changes","title":"Commit and push your changes","text":"<p>If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/</p> <p>First, add the files that you changed to the staging area:</p> <pre><code>git add path/to/changed/files/\n</code></pre> <p>Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as <code>feat</code>, <code>fix</code>, <code>docs</code>, etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages.</p> <pre><code>git commit -m 'feat: create function for awesome feature'\n</code></pre> <p>pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Failed </p> <ul> <li>hook id: trailing-whitespace </li> <li>exit code: 1 </li> <li>files were modified by this hook  &gt;    Fixing path/to/changed/files/file.txt  &gt;    codespell................................................................Passed    style-files..........................................(no files to check)Skipped    readme-rmd-rendered..................................(no files to check)Skipped    use-tidy-description.................................(no files to check)Skipped </li> </ul> <p>In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run <code>git diff</code> to see the changes that pre-commit made and <code>git status</code> to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command:</p> <pre><code>git add path/to/changed/files/file.txt\ngit commit -m 'feat: create function for awesome feature'\n</code></pre> <p>This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Passed  codespell................................................................Passed  style-files..........................................(no files to check)Skipped  readme-rmd-rendered..................................(no files to check)Skipped  use-tidy-description.................................(no files to check)Skipped  Conventional Commit......................................................Passed  &gt; [iss-10 9ff256e] feat: create function for awesome feature  1 file changed, 22 insertions(+), 3 deletions(-) </p> <p>Finally, push your changes to GitHub:</p> <pre><code>git push\n</code></pre> <p>If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch:</p> <pre><code>git push --set-upstream origin iss-10\n</code></pre> <p>Enumerating objects: 7, done.  Counting objects: 100% (7/7), done.  Delta compression using up to 10 threads  Compressing objects: 100% (4/4), done.  Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done.  Total 4 (delta 3), reused 0 (delta 0), pack-reused 0  remote: Resolving deltas: 100% (3/3), completed with 3 local objects.  remote:  remote: Create a pull request for 'iss-10' on GitHub by visiting:  remote: https://github.com/CCBR/CHAMPAGNE/pull/new/iss-10  remote:  To https://github.com/CCBR/CHAMPAGNE  &gt;  &gt; [new branch] iss-10 -&gt; iss-10  branch 'iss-10' set up to track 'origin/iss-10'. </p> <p>We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at <code>https://github.com/CCBR/CHAMPAGNE/tree/&lt;your-branch-name&gt;</code> (replace <code>&lt;your-branch-name&gt;</code> with the actual name of your branch).</p>"},{"location":"contributing/#create-the-pr","title":"Create the PR","text":"<p>Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/CHAMPAGNE/pull/new/</p> <p>Select the branch you just pushed:</p> <p></p> <p>Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <code>&lt;!--</code> and <code>--&gt;</code>) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it.</p> <p></p> <p>Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready.</p>"},{"location":"contributing/#wait-for-a-maintainer-to-review-your-pr","title":"Wait for a maintainer to review your PR","text":"<p>We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/. The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR.</p> <p>Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution!</p>"},{"location":"contributing/#after-your-pr-has-been-merged","title":"After your PR has been merged","text":"<p>After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes:</p> <pre><code>git checkout main\ngit pull\n</code></pre> <p>It's a good idea to run <code>git pull</code> before creating a new branch so it will start from the most recent commits in main.</p>"},{"location":"contributing/#helpful-links-for-more-information","title":"Helpful links for more information","text":"<ul> <li>GitHub Flow</li> <li>semantic versioning guidelines</li> <li>changelog guidelines</li> <li>tidyverse code review principles</li> <li>reproducible examples</li> <li>nf-core extensions for VS Code</li> </ul>"},{"location":"contributors/","title":"Contributors","text":"<p>Should include a list of all contributors, including GitHub handles when appropriate. In addition, a statement of who contributed to the source code specifically, identified by initials. An example is included below.</p> <p>TODO: populate this automagically similar to https://nf-co.re/contributors? or link to GitHub contributor page? could use gh action: https://github.com/lowlighter/metrics/blob/master/source/plugins/contributors/README.md</p>"},{"location":"contributors/#contributions","title":"Contributions","text":"<p>The following members contributed to the development of the CARLISLE pipeline:</p> <ul> <li>Samantha Sevilla</li> </ul> <p>SS contributed to the generating the source code and all members contributed to the main concepts and analysis.</p>"},{"location":"getting-started/","title":"Getting Started with CHAMPAGNE","text":"<p>TODO intro paragraph</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>CHAMPAGNE is installed on the Biowulf and FRCE clusters as part of the <code>ccbrpipeliner</code> module. If you'd like to run the pipeline in a different execution environment, take a look at how to run the nextflow pipeline directly.</p>"},{"location":"getting-started/#prepare-a-sample-sheet","title":"Prepare a sample sheet","text":"<p>TODO</p>"},{"location":"getting-started/#initialize","title":"Initialize","text":"<p>Copy the configuration files to your current working directory</p> <pre><code>champagne init\n</code></pre>"},{"location":"getting-started/#run","title":"Run","text":"<p>TODO preview, stub, mode=slurm</p> <p>TODO required params</p> <p>Run preview to view processes that will run:</p> <pre><code>champagne run -profile test -preview\n</code></pre> <p>Launch a stub run to view processes that will run and download containers:</p> <pre><code>champagne run -profile test,singularity -stub\n</code></pre> <p>Run the test dataset using the test profile:</p> <pre><code>champagne run -profile test,singularity\n</code></pre> <p>or explicitly specify the output directory and input:</p> <pre><code>champagne run -profile singularity --outdir results/test --input assets/samplesheet_test.csv\n</code></pre>"},{"location":"getting-started/#custom-reference-genome","title":"Custom reference genome","text":"<p>TODO different required params</p> <p>Create and use a custom reference genome:</p> <pre><code>champagne run -profile test -entry MAKE_REFERENCE\nchampagne run -profile test -c results/test/genome/custom_genome.config\n</code></pre>"},{"location":"manifests/","title":"TODO Jotting notes here","text":""},{"location":"manifests/#samplemanifest","title":"Samplemanifest","text":"<p>The following columns are required:</p> <ul> <li>sample: sampleID; does not need to be a unique column</li> <li>rep: replicateID of sampleID; does not need to be a unique column</li> <li>fastq_1: absolute path to R1 of sampleID</li> <li>fastq_2: absolute path to R1 of sampleID</li> <li>antibody: -c sampleID for mac2; this must match a unique {sample}_{rep} format</li> <li>control: </li> </ul> <p>Example antibody / control format for a single-end project:</p> <pre><code>sample,rep,fastq_1,fastq_2,antibody,control\nsample,1,/path/to/sample_1.R1.fastq.gz,,input_1,input_1\nsample,2,/path/to/sample_2.R1.fastq.gz,,input_1,input_1\ninput,1,/path/to/sample1.R1.fastq.gz,,,\ninput,2,/path/to/sample1.R1.fastq.gz,,,\n</code></pre> <p>Example antibody / control format for a paired-end project:</p> <pre><code>sample,rep,fastq_1,fastq_2,antibody,control\nsample,1,/path/to/sample_1.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,input_1,input_1\nsample,2,/path/to/sample_2.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,input_1,input_1\ninput,1,/path/to/input_1.R1.fastq.gz,/path/to/input_1.R2.fastq.gz,,\ninput,2,/path/to/input_2.R1.fastq.gz,/path/to/input_2.R2.fastq.gz,,\n</code></pre>"},{"location":"nextflow/","title":"nextflow pipeline","text":"<p>You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run <code>champagne init</code> first, as the config files will be accessed directly from the GitHub repo.</p> <pre><code>nextflow run CCBR/CHAMPAGNE -profile test,singularity\n</code></pre> <p>You can specify a specific version, tag, or branch on GitHub with <code>-r</code>:</p> <pre><code>nextflow run CCBR/CHAMPAGNE -r v0.3.0 -profile test,singularity\n</code></pre> <p>Create and use a custom reference genome:</p> <pre><code>nextflow run CCBR/CHAMPAGNE -profile test -entry MAKE_REFERENCE\nnextflow run CCBR/CHAMPAGNE -profile test -c results/test/genome/custom_genome.config\n</code></pre>"},{"location":"nextflow/#biowulf","title":"biowulf","text":"<p>If you're running it on biowulf without the <code>champagne</code> CLI, first load the ccbrpipeliner and nextflow modules, and be sure to specify the <code>biowulf</code> and <code>slurm</code> profiles:</p> <pre><code>module load ccbrpipeliner\nmodule load nextflow\nnextflow run CCBR/CHAMPAGNE -profile test,biowulf,slurm\n</code></pre>"},{"location":"release-guide/","title":"Release Guide","text":""},{"location":"release-guide/#how-to-test-a-pre-release-on-biowulf","title":"How to test a pre-release on biowulf","text":"<p>Install the development version of champagne.</p> <pre><code># activate the conda env for development\n. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n\n# go to the source on biowulf and update\ncd /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/champagne-dev\ngit pull\n# optionally switch to different branch if needed\n\n# install the version to a hidden path (e.g. .dev, .v1.0.0.9000) in /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE\ncd ..\npip install ./champagne-dev -t ./.dev\n# add it to your PATH and PYTHONPATH with:\nexport PATH=\"$PATH:/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/bin/\"\nexport PYTHONPATH=\"$PYTHONPATH:/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/\"\n</code></pre>"},{"location":"workflow/","title":"Workflow Overview","text":""},{"location":"workflow/#process-workflow","title":"Process workflow","text":"<p>TODO add images to show workflow </p>"},{"location":"workflow/#pipeline-checks","title":"Pipeline Checks","text":"<ul> <li> <p>Input files are checked that they meet standard formatting; some file access is reviewed</p> </li> <li> <p>Processes include:</p> <ul> <li>INPUT_CHECK:SAMPLESHEET_CHECK </li> <li>INPUT_CHECK:CHECK_CONTRASTS</li> </ul> </li> <li> <p>Output directories include:</p> <ul> <li>check_contrasts</li> </ul> </li> </ul>"},{"location":"workflow/#pre-alignment","title":"Pre-alignment","text":"<ul> <li> <p>Adaptors are trimmed, if blacklists are included, filtering occurs</p> </li> <li> <p>Processes include:</p> <ul> <li>CUTADAPT</li> <li>FILTER_BLACKLIST:BWA_MEM</li> <li>FILTER_BLACKLIST:SAMTOOLS_FILTERALIGNED</li> <li>FILTER_BLACKLIST:PICARD_SAMTOFASTQ</li> <li>FILTER_BLACKLIST:CUSTOM_COUNTFASTQ</li> </ul> </li> <li> <p>Output directories include:</p> <ul> <li>cutadapt</li> </ul> </li> </ul>"},{"location":"workflow/#alignment","title":"Alignment","text":"<ul> <li> <p>Samples are aligned using BWA; alignment stats are generated; samples are sorted and filtered</p> </li> <li> <p>Processes include:</p> <ul> <li>ALIGN_GENOME:BWA_MEM</li> <li>ALIGN_GENOME:SAMTOOLS_FLAGSTAT_ALIGN</li> <li>ALIGN_GENOME:FILTER_QUALITY</li> <li>ALIGN_GENOME:SAMTOOLS_SORT</li> <li>ALIGN_GENOME:SAMTOOLS_FLAGSTAT_FILTER</li> </ul> </li> <li> <p>Output directories include:</p> <ul> <li>bwa_mem</li> <li>samtools_flagstat_align</li> <li>samtools_filteraligned</li> <li>samtools_sort</li> <li>samtools_flagstat_filter</li> </ul> </li> </ul>"},{"location":"workflow/#deduplicate","title":"Deduplicate","text":"<ul> <li> <p>Processes include:</p> <ul> <li>DEDUPLICATE:MACS2_DEDUP</li> <li>DEDUPLICATE:INDEX_SINGLE</li> <li>DEDUPLICATE:PICARD_DEDUP</li> <li>DEDUPLICATE:INDEX_PAIRED</li> </ul> </li> <li> <p>Output directories include:</p> </li> </ul>"},{"location":"workflow/#quality-control","title":"Quality Control","text":"<ul> <li> <p>Processes include:</p> <ul> <li>PPQT_PROCESS</li> <li>QC:FASTQC_RAW</li> <li>QC:FASTQC_TRIMMED</li> <li>QC:FASTQ_SCREE</li> <li>QC:PRESEQ</li> <li>QC:HANDLE_PRESEQ_ERROR</li> <li>QC:PARSE_PRESEQ_LOG </li> <li>QC:QC_STATS</li> <li>QC:QC_TABLE</li> </ul> </li> </ul>"},{"location":"workflow/#deeptools-analysis","title":"Deeptools analysis","text":"<ul> <li> <p>Processes include:</p> <ul> <li>QC:DEEPTOOLS:BAM_COVERAGE</li> <li>QC:DEEPTOOLS:BIGWIG_SUM</li> <li>QC:DEEPTOOLS:PLOT_CORRELATION</li> <li>QC:DEEPTOOLS:PLOT_PCA</li> <li>QC:DEEPTOOLS:NORMALIZE_INPUT</li> <li>QC:DEEPTOOLS:BED_PROTEIN_CODING</li> <li>QC:DEEPTOOLS:COMPUTE_MATRIX</li> <li>QC:DEEPTOOLS:PLOT_HEATMAP</li> <li>QC:DEEPTOOLS:PLOT_PROFILE</li> <li>QC:DEEPTOOLS:PLOT_FINGERPRINT</li> </ul> </li> </ul>"},{"location":"workflow/#peak-calling","title":"Peak calling","text":"<ul> <li> <p>Processes include:</p> <ul> <li>PHANTOM_PEAKS</li> <li>CALL_PEAKS:CALC_GENOME_FRAC</li> <li>CALL_PEAKS:BAM_TO_BED</li> <li>CALL_PEAKS:MACS_BROAD</li> <li>CALL_PEAKS:MACS_NARROW</li> <li>CALL_PEAKS:SICER</li> <li>CALL_PEAKS:CONVERT_SICER</li> <li>CALL_PEAKS:GEM</li> <li>CALL_PEAKS:FILTER_GEM</li> <li>CALL_PEAKS:FRACTION_IN_PEAKS</li> <li>CALL_PEAKS:CONCAT_FRIPS</li> <li>CALL_PEAKS:PLOT_FRIP</li> <li>CALL_PEAKS:GET_PEAK_META</li> <li>CALL_PEAKS:CONCAT_PEAK_META</li> <li>CALL_PEAKS:PLOT_PEAK_WIDTHS</li> </ul> </li> </ul>"},{"location":"workflow/#consensus-peaks","title":"Consensus Peaks","text":"<ul> <li> <p>Processes include:</p> <ul> <li>CONSENSUS_PEAKS:CAT_CAT</li> <li>CONSENSUS_PEAKS:SORT_BED</li> <li>CONSENSUS_PEAKS:BEDTOOLS_MERGE</li> <li>CONSENSUS_PEAKS:- CONSENSUS_PEAKS:_OUT</li> </ul> </li> </ul>"},{"location":"workflow/#annotate","title":"Annotate","text":"<ul> <li> <p>Processes include:</p> <ul> <li>ANNOTATE:CHIPSEEKER_PEAKPLOT</li> <li>ANNOTATE:CHIPSEEKER_ANNOTATE</li> <li>ANNOTATE:CHIPSEEKER_PLOTLIST</li> <li>ANNOTATE:HOMER_MOTIFS</li> <li>ANNOTATE:MEME_AME</li> </ul> </li> </ul>"},{"location":"workflow/#differential-analysis","title":"Differential Analysis","text":"<ul> <li> <p>If there are more than 2 replicates per group then <code>diffbind</code> is performed; otherwise <code>manorm</code> pairewise analysis is performed</p> </li> <li> <p>Processes include:</p> <ul> <li>DIFF:DIFFBIND:PREP_DIFFBIND</li> <li>DIFF:DIFFBIND:DIFFBIND_RMD</li> <li>DIFF:MANORM:MANORM_PAIRWISE</li> </ul> </li> </ul>"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CHAMPAGNE \ud83c\udf7e \u00b6 CH rom A tin i M muno P recipit A tion sequencin G a N alysis pip E line \ud83d\udea7 This project is under active development. It is not yet ready for production use. \ud83d\udea7 Set up \u00b6 Champagne is installed on the Biowulf HPC . For installation in other execution environments, refer to the docs . Biowulf \u00b6 Champagne is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session and create a directory from where you'll run champagne. # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # make a working directory for your project and go to it mkdir -p /data/ $USER /chipseq cd /data/ $USER /chipseq # load the ccbrpipeliener module module load ccbrpipeliner Usage \u00b6 Initialize and run champagne with test data: # copy the champagne config files to your project directory. # --output is optional and defaults to your current working directory. champagne init --output /data/ $USER /champagne_project # preview the champagne jobs that will run with the test dataset champagne run --output /data/ $USER /champagne_project --mode local -profile test -preview # launch a champagne run on slurm with the test dataset champagne run --output /data/ $USER /champagne_project --mode slurm -profile test,biowulf To run champagne on your own data, you'll need to create a sample sheet. Take a look at these examples: assets/samplesheet_test.csv - mix of single and paired end reads downloaded from github. assets/samplesheet_mm10.csv - single end reads on biowulf. Once you've created a samplesheet with paths to your fastq files, run champagne with the --input option to specify the path to your sample sheet: champagne run --output /data/ $USER /champagne_project --mode slurm -profile biowulf --input samplesheet.csv --genome hg38 We currently support the hg38 and mm10 genomes. If you'd like to use a custom genome, you'll need the following files: genome fasta genome GTF blacklist fasta Prepare your custom reference genome with: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ -entry MAKE_REFERENCE \\ --outdir custom_genome \\ --genome custom_genome \\ --genome_fasta genome.fasta \\ --genes_gtf genome.gtf \\ --blacklist blacklist.fasta The reference files and a config file for the genome will be written in custom_genome/genome . Then you can run champagne using your custom genome: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ --input samplesheet.csv \\ --genome custom_genome \\ -c custom_genome/genome/custom_genome.config Help & Contributing \u00b6 Come across a bug ? Open an issue and include a minimal reproducible example. Have a question ? Ask it in discussions . Want to contribute to this project? Check out the contributing guidelines . General Inquiries and Collaboration: Please contact the CCBR Pipeliner team at CCBR_Pipeliner@mail.nih.gov . References \u00b6 This repo was originally generated from the CCBR Nextflow Template . The template takes inspiration from nektool 1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions 2 . Information on who the pipeline was developed for, and a statement if it's only been tested on Biowulf. For example: It has been developed and tested solely on NIH HPC Biowulf . Also include a workflow image to summarize the pipeline. nektool https://github.com/beardymcjohnface/nektool \u21a9 instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9","title":"Home"},{"location":"#champagne","text":"CH rom A tin i M muno P recipit A tion sequencin G a N alysis pip E line \ud83d\udea7 This project is under active development. It is not yet ready for production use. \ud83d\udea7","title":"CHAMPAGNE \ud83c\udf7e"},{"location":"#set-up","text":"Champagne is installed on the Biowulf HPC . For installation in other execution environments, refer to the docs .","title":"Set up"},{"location":"#biowulf","text":"Champagne is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session and create a directory from where you'll run champagne. # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # make a working directory for your project and go to it mkdir -p /data/ $USER /chipseq cd /data/ $USER /chipseq # load the ccbrpipeliener module module load ccbrpipeliner","title":"Biowulf"},{"location":"#usage","text":"Initialize and run champagne with test data: # copy the champagne config files to your project directory. # --output is optional and defaults to your current working directory. champagne init --output /data/ $USER /champagne_project # preview the champagne jobs that will run with the test dataset champagne run --output /data/ $USER /champagne_project --mode local -profile test -preview # launch a champagne run on slurm with the test dataset champagne run --output /data/ $USER /champagne_project --mode slurm -profile test,biowulf To run champagne on your own data, you'll need to create a sample sheet. Take a look at these examples: assets/samplesheet_test.csv - mix of single and paired end reads downloaded from github. assets/samplesheet_mm10.csv - single end reads on biowulf. Once you've created a samplesheet with paths to your fastq files, run champagne with the --input option to specify the path to your sample sheet: champagne run --output /data/ $USER /champagne_project --mode slurm -profile biowulf --input samplesheet.csv --genome hg38 We currently support the hg38 and mm10 genomes. If you'd like to use a custom genome, you'll need the following files: genome fasta genome GTF blacklist fasta Prepare your custom reference genome with: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ -entry MAKE_REFERENCE \\ --outdir custom_genome \\ --genome custom_genome \\ --genome_fasta genome.fasta \\ --genes_gtf genome.gtf \\ --blacklist blacklist.fasta The reference files and a config file for the genome will be written in custom_genome/genome . Then you can run champagne using your custom genome: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ --input samplesheet.csv \\ --genome custom_genome \\ -c custom_genome/genome/custom_genome.config","title":"Usage"},{"location":"#help-contributing","text":"Come across a bug ? Open an issue and include a minimal reproducible example. Have a question ? Ask it in discussions . Want to contribute to this project? Check out the contributing guidelines . General Inquiries and Collaboration: Please contact the CCBR Pipeliner team at CCBR_Pipeliner@mail.nih.gov .","title":"Help &amp; Contributing"},{"location":"#references","text":"This repo was originally generated from the CCBR Nextflow Template . The template takes inspiration from nektool 1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions 2 . Information on who the pipeline was developed for, and a statement if it's only been tested on Biowulf. For example: It has been developed and tested solely on NIH HPC Biowulf . Also include a workflow image to summarize the pipeline. nektool https://github.com/beardymcjohnface/nektool \u21a9 instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9","title":"References"},{"location":"changelog/","text":"CHAMPAGNE development version \u00b6 CHAMPAGNE now depends on ccbr_tools v0.4 for updated jobby & spooker utilities. (#247, @kelly-sovacool) Contrasts are now specified as a TSV file instead of YAML. (#224, @kelly-sovacool) See the example contrast sheets in assets/ . Refactor checks for the sample sheet & contrast sheet to prevent unnecessary re-running. (#224, @kelly-sovacool) Set publish_dir_mode to link by default. Set process.cache to deep by default rather than lenient. (#224, @kelly-sovacool) Fix a file name clash during input pooling. (#224, @kelly-sovacool) Use nextflow run -resume by default, or turn it off with champagne run --forceall . (#224, @kelly-sovacool) New consensus peak method from Corces et al. ( doi:10.1126/science.aav1898 ). (#225, #246, @kelly-sovacool) Enable the nextflow timeline & trace reports by default. (#226, @kelly-sovacool) Add --output argument for champagne init and champagne run . (#232, #233, @kelly-sovacool) This is equivalent to the nextflow launchDir constant. Fix bug in MEME AME process that caused it not to run on all samples. (#234, @kelly-sovacool) Also correct the motif rank calculation. (#234, @kopardev) Now using the readthedocs theme for the docs website. (#236, @kelly-sovacool) CHAMPAGNE 0.4.1 \u00b6 The CHAMPAGNE nextflow workflow now has a version entry in nextflow.config , in compliance with nf-core. (#213, @kelly-sovacool) Pool input (control) reads of the same sample name by default. Any inputs that should not be pooled must have different sample names in the samplesheet. (#214, @kelly-sovacool) Add histone samples to the test_human dataset. (#215, @kelly-sovacool) CHAMPAGNE 0.4.0 \u00b6 New features \u00b6 Create a script ( bin/champagne ) to provide an interface to the champagne CLI that works out-of-the-box without the need to install the python package with pip . (#180, @kelly-sovacool) However, any dependencies not in the Python Standard Library must be installed for this to work. See the dependencies list in pyproject.toml . Allow additional columns in the sample sheet beyond the minimum required header. (#176, @kelly-sovacool) Add a workflow entry point to download fastq files from SRA. (#176, @kelly-sovacool) Add test_human profile with chipseq data from ENCODE. (#176, @kelly-sovacool) Bug fixes \u00b6 Fix configuration files for compatibility with using the GitHub repo as the source. (#173, @kelly-sovacool) These equivalent commands now work: nextflow run CCBR/CHAMPAGNE champagne run --main CCBR/CHAMPAGNE Allow multiple samples to use the same input. (#176, @kelly-sovacool) In the biowulf config profile, switch variable $SLURM_JOBID to $SLURM_JOB_ID. (@kelly-sovacool) Increase resource allocations for chipseeker and deeptools. (#192, @slsevilla) Check the validity of the contrastsheet earlier on in the workflow. (#192, @slsevilla; #200, @kelly-sovacool) Fix bug where manorm was using R1 twice instead of R1 and R2. (#206, @kelly-sovacool) Misc \u00b6 Change the peak widths histogram type from overlay to stack. (#176, @kelly-sovacool) Documentation improvements. (#192, @slsevilla) CHAMPAGNE 0.3.0 \u00b6 New features \u00b6 Find motifs in the genome with Homer. (#142) Run motif enrichment analysis with MEME. (#142) Annotate peaks with chipseeker. (#142,#147,#157) Add preseq complexity curve and fastq screen to multiqc report. (#147) Support multiple replicates per sample and call consensus peaks on replicates. (#129) Optionally normalize p-values with the CCBR/consensus_peaks subworkflow. Implement differential peak calling. (#158) Optionally specify contrasts via a YAML file. If no file is specified, differential analysis is not performed. If any sample has only one replicate, run MAnorm , otherwise run diffbind . Print the recommended citation in bibtex format with champagne --citation . (#153) CHAMPAGNE is also now archived in Zenodo with DOI 10.5281/zenodo.10516078 . The docs website now has a dropdown menu to select which version to view. The latest release is shown by default. (#170) Bug fixes \u00b6 Fix deepTools plots (#144): Per sample fingerprint plots instead of per replicate. Input normalized profile plots. Protein-coding-only versions of plots. Ensure sample IDs are sorted. (#150) Fix a bug where the wrong SICER output file was used for downstream analyses. (#155) Fix CLI profile on machines other than biowulf & FRCE. (#168) Fix broken bold styling in documentation website. (#53) CHAMPAGNE 0.2.2 \u00b6 Fix permissions issues in the CLI. (#167) CHAMPAGNE 0.2.1 \u00b6 Fix a bug in QC stats that mixed up the statistics for different samples. (#125) Fix a bug in the CLI that added the -profile to the nextflow command even if it wasn't needed (#125). Report read counts between blacklist & filtering steps in the QC table. (#125) Run spooker on workflow completion (#126). CHAMPAGNE 0.2.0 \u00b6 New features \u00b6 Implement peak calling with sicer2, macs2, and gem. (#52) Add parameter options to skip QC, input normalization, and/or peak calling steps. (#72) Calculate and plot QC metrics for called peaks: Fraction in Peaks (FRiP) (#89) Jaccard index (#92) Histogram of peak widths (#92) Add support for paired-end reads. (#105) Add an option to use a custom reference from a genome fasta, gtf, and blacklist file. (#105) Champagne CLI: (#112) New --mode option for champagne run to execute the workflow locally ('local') or submit it as a slurm job ('slurm'). Option to override the path to the champagne main.nf file or specify the github repo ( CCBR/CHAMPAGNE ) instead. # use the default path champagne run ... # override the path champagne run path/to/champagne/main.nf # use a revision from github instead champagne run CCBR/CHAMPAGNE -r v0.1.0 Bug fixes \u00b6 CLI: Error when biowulf-specific environment variables are not defined. (#54) The host is now correctly detected as biowulf via scontrol . (#75) Containers: Containers are now specified in process definitions instead of withName / withLabel for better control. (#69) Shared containers are specified as parameters in the config file conf/containers.config . No longer use --mount type=bind or --volume for making directories available to processes in containers. Instead, use Nextflow's Channel.fromPath constructor with type: 'dir' . (#71) API-breaking changes \u00b6 An error is thrown when a required input file doesn't exist. (#71) Previously, the workflow quietly didn't run the process(es) that required the missing file. Renamed champagne config to champagne init to avoid clashing with nextflow config . (#112) CHAMPAGNE 0.1.0 \u00b6 Quality control steps implemented for single-end reads \u00b6 Trim raw reads, FastQC on raw and trimmed reads, and FastQ Screen on trimmed reads. Exclude reads that align to blacklist regions, align remaining reads to the reference genome, and deduplicate. Preseq on aligned reads. Phantompeakqualtools on aligned and deduplicated reads. Process reads with deepTools: bam coverage to generate bigwigs for each sample, summarize all bigwigs, and compute matrices relative to TSSs and scaled to metagene regions. Generate plots with deepTools: PCA, profile, heatmap, spearman correlation, and fingerprint plots. Summarize all quality control steps in a MultiQC report. Input-normalize ChIP fragments for the next stage of the pipeline.","title":"Changelog"},{"location":"changelog/#champagne-development-version","text":"CHAMPAGNE now depends on ccbr_tools v0.4 for updated jobby & spooker utilities. (#247, @kelly-sovacool) Contrasts are now specified as a TSV file instead of YAML. (#224, @kelly-sovacool) See the example contrast sheets in assets/ . Refactor checks for the sample sheet & contrast sheet to prevent unnecessary re-running. (#224, @kelly-sovacool) Set publish_dir_mode to link by default. Set process.cache to deep by default rather than lenient. (#224, @kelly-sovacool) Fix a file name clash during input pooling. (#224, @kelly-sovacool) Use nextflow run -resume by default, or turn it off with champagne run --forceall . (#224, @kelly-sovacool) New consensus peak method from Corces et al. ( doi:10.1126/science.aav1898 ). (#225, #246, @kelly-sovacool) Enable the nextflow timeline & trace reports by default. (#226, @kelly-sovacool) Add --output argument for champagne init and champagne run . (#232, #233, @kelly-sovacool) This is equivalent to the nextflow launchDir constant. Fix bug in MEME AME process that caused it not to run on all samples. (#234, @kelly-sovacool) Also correct the motif rank calculation. (#234, @kopardev) Now using the readthedocs theme for the docs website. (#236, @kelly-sovacool)","title":"CHAMPAGNE development version"},{"location":"changelog/#champagne-041","text":"The CHAMPAGNE nextflow workflow now has a version entry in nextflow.config , in compliance with nf-core. (#213, @kelly-sovacool) Pool input (control) reads of the same sample name by default. Any inputs that should not be pooled must have different sample names in the samplesheet. (#214, @kelly-sovacool) Add histone samples to the test_human dataset. (#215, @kelly-sovacool)","title":"CHAMPAGNE 0.4.1"},{"location":"changelog/#champagne-040","text":"","title":"CHAMPAGNE 0.4.0"},{"location":"changelog/#new-features","text":"Create a script ( bin/champagne ) to provide an interface to the champagne CLI that works out-of-the-box without the need to install the python package with pip . (#180, @kelly-sovacool) However, any dependencies not in the Python Standard Library must be installed for this to work. See the dependencies list in pyproject.toml . Allow additional columns in the sample sheet beyond the minimum required header. (#176, @kelly-sovacool) Add a workflow entry point to download fastq files from SRA. (#176, @kelly-sovacool) Add test_human profile with chipseq data from ENCODE. (#176, @kelly-sovacool)","title":"New features"},{"location":"changelog/#bug-fixes","text":"Fix configuration files for compatibility with using the GitHub repo as the source. (#173, @kelly-sovacool) These equivalent commands now work: nextflow run CCBR/CHAMPAGNE champagne run --main CCBR/CHAMPAGNE Allow multiple samples to use the same input. (#176, @kelly-sovacool) In the biowulf config profile, switch variable $SLURM_JOBID to $SLURM_JOB_ID. (@kelly-sovacool) Increase resource allocations for chipseeker and deeptools. (#192, @slsevilla) Check the validity of the contrastsheet earlier on in the workflow. (#192, @slsevilla; #200, @kelly-sovacool) Fix bug where manorm was using R1 twice instead of R1 and R2. (#206, @kelly-sovacool)","title":"Bug fixes"},{"location":"changelog/#misc","text":"Change the peak widths histogram type from overlay to stack. (#176, @kelly-sovacool) Documentation improvements. (#192, @slsevilla)","title":"Misc"},{"location":"changelog/#champagne-030","text":"","title":"CHAMPAGNE 0.3.0"},{"location":"changelog/#new-features_1","text":"Find motifs in the genome with Homer. (#142) Run motif enrichment analysis with MEME. (#142) Annotate peaks with chipseeker. (#142,#147,#157) Add preseq complexity curve and fastq screen to multiqc report. (#147) Support multiple replicates per sample and call consensus peaks on replicates. (#129) Optionally normalize p-values with the CCBR/consensus_peaks subworkflow. Implement differential peak calling. (#158) Optionally specify contrasts via a YAML file. If no file is specified, differential analysis is not performed. If any sample has only one replicate, run MAnorm , otherwise run diffbind . Print the recommended citation in bibtex format with champagne --citation . (#153) CHAMPAGNE is also now archived in Zenodo with DOI 10.5281/zenodo.10516078 . The docs website now has a dropdown menu to select which version to view. The latest release is shown by default. (#170)","title":"New features"},{"location":"changelog/#bug-fixes_1","text":"Fix deepTools plots (#144): Per sample fingerprint plots instead of per replicate. Input normalized profile plots. Protein-coding-only versions of plots. Ensure sample IDs are sorted. (#150) Fix a bug where the wrong SICER output file was used for downstream analyses. (#155) Fix CLI profile on machines other than biowulf & FRCE. (#168) Fix broken bold styling in documentation website. (#53)","title":"Bug fixes"},{"location":"changelog/#champagne-022","text":"Fix permissions issues in the CLI. (#167)","title":"CHAMPAGNE 0.2.2"},{"location":"changelog/#champagne-021","text":"Fix a bug in QC stats that mixed up the statistics for different samples. (#125) Fix a bug in the CLI that added the -profile to the nextflow command even if it wasn't needed (#125). Report read counts between blacklist & filtering steps in the QC table. (#125) Run spooker on workflow completion (#126).","title":"CHAMPAGNE 0.2.1"},{"location":"changelog/#champagne-020","text":"","title":"CHAMPAGNE 0.2.0"},{"location":"changelog/#new-features_2","text":"Implement peak calling with sicer2, macs2, and gem. (#52) Add parameter options to skip QC, input normalization, and/or peak calling steps. (#72) Calculate and plot QC metrics for called peaks: Fraction in Peaks (FRiP) (#89) Jaccard index (#92) Histogram of peak widths (#92) Add support for paired-end reads. (#105) Add an option to use a custom reference from a genome fasta, gtf, and blacklist file. (#105) Champagne CLI: (#112) New --mode option for champagne run to execute the workflow locally ('local') or submit it as a slurm job ('slurm'). Option to override the path to the champagne main.nf file or specify the github repo ( CCBR/CHAMPAGNE ) instead. # use the default path champagne run ... # override the path champagne run path/to/champagne/main.nf # use a revision from github instead champagne run CCBR/CHAMPAGNE -r v0.1.0","title":"New features"},{"location":"changelog/#bug-fixes_2","text":"CLI: Error when biowulf-specific environment variables are not defined. (#54) The host is now correctly detected as biowulf via scontrol . (#75) Containers: Containers are now specified in process definitions instead of withName / withLabel for better control. (#69) Shared containers are specified as parameters in the config file conf/containers.config . No longer use --mount type=bind or --volume for making directories available to processes in containers. Instead, use Nextflow's Channel.fromPath constructor with type: 'dir' . (#71)","title":"Bug fixes"},{"location":"changelog/#api-breaking-changes","text":"An error is thrown when a required input file doesn't exist. (#71) Previously, the workflow quietly didn't run the process(es) that required the missing file. Renamed champagne config to champagne init to avoid clashing with nextflow config . (#112)","title":"API-breaking changes"},{"location":"changelog/#champagne-010","text":"","title":"CHAMPAGNE 0.1.0"},{"location":"changelog/#quality-control-steps-implemented-for-single-end-reads","text":"Trim raw reads, FastQC on raw and trimmed reads, and FastQ Screen on trimmed reads. Exclude reads that align to blacklist regions, align remaining reads to the reference genome, and deduplicate. Preseq on aligned reads. Phantompeakqualtools on aligned and deduplicated reads. Process reads with deepTools: bam coverage to generate bigwigs for each sample, summarize all bigwigs, and compute matrices relative to TSSs and scaled to metagene regions. Generate plots with deepTools: PCA, profile, heatmap, spearman correlation, and fingerprint plots. Summarize all quality control steps in a MultiQC report. Input-normalize ChIP fragments for the next stage of the pipeline.","title":"Quality control steps implemented for single-end reads"},{"location":"contributing/","text":"Contributing to CHAMPAGNE \u00b6 Proposing changes with issues \u00b6 If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed. If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it. Pull request process \u00b6 We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to CHAMPAGNE. Clone the repo \u00b6 If you are a member of CCBR , you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once. git clone https://github.com/CCBR/CHAMPAGNE Cloning into 'CHAMPAGNE'... remote: Enumerating objects: 1136, done. remote: Counting objects: 100% (463/463), done. remote: Compressing objects: 100% (357/357), done. remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673 Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done. Resolving deltas: 100% (530/530), done. cd CHAMPAGNE If this is your first time cloning the repo, you may need to install dependencies \u00b6 Install nextflow and singularity or docker if needed (biowulf already has these available as modules). Install the python dependencies with pip pip install . If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 Install pre-commit if you don't already have it. Then from the repo's root directory, run pre-commit install This will install the repo's pre-commit hooks. You'll only need to do this step the first time you clone the repo. Create a branch \u00b6 Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as iss-10 if it is for a specific issue. # create a new branch and switch to it git branch iss-10 git switch iss-10 Switched to a new branch 'iss-10' Make your changes \u00b6 Edit the code, write and run tests, and update the documentation as needed. test \u00b6 Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the tests/ subdirectory. Run the tests with python -m pytest . If you change the workflow , please run the workflow with the test profile and make sure your new feature or bug fix works as intended. document \u00b6 If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in docs/ . Commit and push your changes \u00b6 If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/ First, add the files that you changed to the staging area: git add path/to/changed/files/ Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as feat , fix , docs , etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages. git commit -m 'feat: create function for awesome feature' pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Failed hook id: trailing-whitespace exit code: 1 files were modified by this hook > Fixing path/to/changed/files/file.txt > codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run git diff to see the changes that pre-commit made and git status to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command: git add path/to/changed/files/file.txt git commit -m 'feat: create function for awesome feature' This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Passed codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped Conventional Commit......................................................Passed > [iss-10 9ff256e] feat: create function for awesome feature 1 file changed, 22 insertions(+), 3 deletions(-) Finally, push your changes to GitHub: git push If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch: git push --set-upstream origin iss-10 Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 10 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done. Total 4 (delta 3), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (3/3), completed with 3 local objects. remote: remote: Create a pull request for 'iss-10' on GitHub by visiting: remote: https://github.com/CCBR/CHAMPAGNE/pull/new/iss-10 remote: To https://github.com/CCBR/CHAMPAGNE > > [new branch] iss-10 -> iss-10 branch 'iss-10' set up to track 'origin/iss-10'. We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at https://github.com/CCBR/CHAMPAGNE/tree/<your-branch-name> (replace <your-branch-name> with the actual name of your branch). Create the PR \u00b6 Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/CHAMPAGNE/pull/new/ Select the branch you just pushed: Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <!-- and --> ) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it. Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready. Wait for a maintainer to review your PR \u00b6 We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/ . The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR. Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution! After your PR has been merged \u00b6 After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes: git checkout main git pull It's a good idea to run git pull before creating a new branch so it will start from the most recent commits in main. Helpful links for more information \u00b6 GitHub Flow semantic versioning guidelines changelog guidelines tidyverse code review principles reproducible examples nf-core extensions for VS Code","title":"How to contribute"},{"location":"contributing/#contributing-to-champagne","text":"","title":"Contributing to CHAMPAGNE"},{"location":"contributing/#proposing-changes-with-issues","text":"If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed. If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it.","title":"Proposing changes with issues"},{"location":"contributing/#pull-request-process","text":"We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to CHAMPAGNE.","title":"Pull request process"},{"location":"contributing/#clone-the-repo","text":"If you are a member of CCBR , you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once. git clone https://github.com/CCBR/CHAMPAGNE Cloning into 'CHAMPAGNE'... remote: Enumerating objects: 1136, done. remote: Counting objects: 100% (463/463), done. remote: Compressing objects: 100% (357/357), done. remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673 Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done. Resolving deltas: 100% (530/530), done. cd CHAMPAGNE","title":"Clone the repo"},{"location":"contributing/#if-this-is-your-first-time-cloning-the-repo-you-may-need-to-install-dependencies","text":"Install nextflow and singularity or docker if needed (biowulf already has these available as modules). Install the python dependencies with pip pip install . If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 Install pre-commit if you don't already have it. Then from the repo's root directory, run pre-commit install This will install the repo's pre-commit hooks. You'll only need to do this step the first time you clone the repo.","title":"If this is your first time cloning the repo, you may need to install dependencies"},{"location":"contributing/#create-a-branch","text":"Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as iss-10 if it is for a specific issue. # create a new branch and switch to it git branch iss-10 git switch iss-10 Switched to a new branch 'iss-10'","title":"Create a branch"},{"location":"contributing/#make-your-changes","text":"Edit the code, write and run tests, and update the documentation as needed.","title":"Make your changes"},{"location":"contributing/#test","text":"Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the tests/ subdirectory. Run the tests with python -m pytest . If you change the workflow , please run the workflow with the test profile and make sure your new feature or bug fix works as intended.","title":"test"},{"location":"contributing/#document","text":"If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in docs/ .","title":"document"},{"location":"contributing/#commit-and-push-your-changes","text":"If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/ First, add the files that you changed to the staging area: git add path/to/changed/files/ Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as feat , fix , docs , etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages. git commit -m 'feat: create function for awesome feature' pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Failed hook id: trailing-whitespace exit code: 1 files were modified by this hook > Fixing path/to/changed/files/file.txt > codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run git diff to see the changes that pre-commit made and git status to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command: git add path/to/changed/files/file.txt git commit -m 'feat: create function for awesome feature' This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Passed codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped Conventional Commit......................................................Passed > [iss-10 9ff256e] feat: create function for awesome feature 1 file changed, 22 insertions(+), 3 deletions(-) Finally, push your changes to GitHub: git push If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch: git push --set-upstream origin iss-10 Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 10 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done. Total 4 (delta 3), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (3/3), completed with 3 local objects. remote: remote: Create a pull request for 'iss-10' on GitHub by visiting: remote: https://github.com/CCBR/CHAMPAGNE/pull/new/iss-10 remote: To https://github.com/CCBR/CHAMPAGNE > > [new branch] iss-10 -> iss-10 branch 'iss-10' set up to track 'origin/iss-10'. We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at https://github.com/CCBR/CHAMPAGNE/tree/<your-branch-name> (replace <your-branch-name> with the actual name of your branch).","title":"Commit and push your changes"},{"location":"contributing/#create-the-pr","text":"Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/CHAMPAGNE/pull/new/ Select the branch you just pushed: Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <!-- and --> ) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it. Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready.","title":"Create the PR"},{"location":"contributing/#wait-for-a-maintainer-to-review-your-pr","text":"We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/ . The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR. Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution!","title":"Wait for a maintainer to review your PR"},{"location":"contributing/#after-your-pr-has-been-merged","text":"After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes: git checkout main git pull It's a good idea to run git pull before creating a new branch so it will start from the most recent commits in main.","title":"After your PR has been merged"},{"location":"contributing/#helpful-links-for-more-information","text":"GitHub Flow semantic versioning guidelines changelog guidelines tidyverse code review principles reproducible examples nf-core extensions for VS Code","title":"Helpful links for more information"},{"location":"contributors/","text":"Should include a list of all contributors, including GitHub handles when appropriate. In addition, a statement of who contributed to the source code specifically, identified by initials. An example is included below. TODO: populate this automagically similar to https://nf-co.re/contributors? or link to GitHub contributor page? could use gh action: https://github.com/lowlighter/metrics/blob/master/source/plugins/contributors/README.md Contributions \u00b6 The following members contributed to the development of the CARLISLE pipeline: Samantha Sevilla SS contributed to the generating the source code and all members contributed to the main concepts and analysis.","title":"Contributors"},{"location":"contributors/#contributions","text":"The following members contributed to the development of the CARLISLE pipeline: Samantha Sevilla SS contributed to the generating the source code and all members contributed to the main concepts and analysis.","title":"Contributions"},{"location":"getting-started/","text":"Getting Started with CHAMPAGNE \u00b6 TODO intro paragraph Installation \u00b6 CHAMPAGNE is installed on the Biowulf and FRCE clusters as part of the ccbrpipeliner module. If you'd like to run the pipeline in a different execution environment, take a look at how to run the nextflow pipeline directly . Prepare a sample sheet \u00b6 TODO Initialize \u00b6 Copy the configuration files to your project directory champagne init --output /data/ $USER /champagne_project or if you do not use --output , your current working directory will be used as default: champagne init Run \u00b6 TODO preview, stub, mode=slurm TODO required params Run preview to view processes that will run: champagne run --output /data/ $USER /champagne_project -profile test -preview Launch a stub run to view processes that will run and download containers: champagne run --output /data/ $USER /champagne_project -profile test,singularity -stub Run the test dataset using the test profile: champagne run --output /data/ $USER /champagne_project -profile test,singularity or explicitly specify the nextflow output directory and input: champagne run --output /data/ $USER /champagne_project -profile singularity --outdir results/test --input assets/samplesheet_test.csv Custom reference genome \u00b6 TODO different required params Create and use a custom reference genome: champagne run --output /data/ $USER /champagne_project -profile test -entry MAKE_REFERENCE champagne run --output /data/ $USER /champagne_project -profile test -c results/test/genome/custom_genome.config","title":"Getting Started"},{"location":"getting-started/#getting-started-with-champagne","text":"TODO intro paragraph","title":"Getting Started with CHAMPAGNE"},{"location":"getting-started/#installation","text":"CHAMPAGNE is installed on the Biowulf and FRCE clusters as part of the ccbrpipeliner module. If you'd like to run the pipeline in a different execution environment, take a look at how to run the nextflow pipeline directly .","title":"Installation"},{"location":"getting-started/#prepare-a-sample-sheet","text":"TODO","title":"Prepare a sample sheet"},{"location":"getting-started/#initialize","text":"Copy the configuration files to your project directory champagne init --output /data/ $USER /champagne_project or if you do not use --output , your current working directory will be used as default: champagne init","title":"Initialize"},{"location":"getting-started/#run","text":"TODO preview, stub, mode=slurm TODO required params Run preview to view processes that will run: champagne run --output /data/ $USER /champagne_project -profile test -preview Launch a stub run to view processes that will run and download containers: champagne run --output /data/ $USER /champagne_project -profile test,singularity -stub Run the test dataset using the test profile: champagne run --output /data/ $USER /champagne_project -profile test,singularity or explicitly specify the nextflow output directory and input: champagne run --output /data/ $USER /champagne_project -profile singularity --outdir results/test --input assets/samplesheet_test.csv","title":"Run"},{"location":"getting-started/#custom-reference-genome","text":"TODO different required params Create and use a custom reference genome: champagne run --output /data/ $USER /champagne_project -profile test -entry MAKE_REFERENCE champagne run --output /data/ $USER /champagne_project -profile test -c results/test/genome/custom_genome.config","title":"Custom reference genome"},{"location":"manifests/","text":"TODO Jotting notes here \u00b6 Samplemanifest \u00b6 The following columns are required: sample: sampleID; does not need to be a unique column rep: replicateID of sampleID; does not need to be a unique column fastq_1: absolute path to R1 of sampleID fastq_2: absolute path to R1 of sampleID antibody: -c sampleID for mac2; this must match a unique {sample}_{rep} format control: Example antibody / control format for a single-end project: sample,rep,fastq_1,fastq_2,antibody,control sample,1,/path/to/sample_1.R1.fastq.gz,,input_1,input_1 sample,2,/path/to/sample_2.R1.fastq.gz,,input_1,input_1 input,1,/path/to/sample1.R1.fastq.gz,,, input,2,/path/to/sample1.R1.fastq.gz,,, Example antibody / control format for a paired-end project: sample,rep,fastq_1,fastq_2,antibody,control sample,1,/path/to/sample_1.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,input_1,input_1 sample,2,/path/to/sample_2.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,input_1,input_1 input,1,/path/to/input_1.R1.fastq.gz,/path/to/input_1.R2.fastq.gz,, input,2,/path/to/input_2.R1.fastq.gz,/path/to/input_2.R2.fastq.gz,,","title":"Creating Manifests"},{"location":"manifests/#todo-jotting-notes-here","text":"","title":"TODO Jotting notes here"},{"location":"manifests/#samplemanifest","text":"The following columns are required: sample: sampleID; does not need to be a unique column rep: replicateID of sampleID; does not need to be a unique column fastq_1: absolute path to R1 of sampleID fastq_2: absolute path to R1 of sampleID antibody: -c sampleID for mac2; this must match a unique {sample}_{rep} format control: Example antibody / control format for a single-end project: sample,rep,fastq_1,fastq_2,antibody,control sample,1,/path/to/sample_1.R1.fastq.gz,,input_1,input_1 sample,2,/path/to/sample_2.R1.fastq.gz,,input_1,input_1 input,1,/path/to/sample1.R1.fastq.gz,,, input,2,/path/to/sample1.R1.fastq.gz,,, Example antibody / control format for a paired-end project: sample,rep,fastq_1,fastq_2,antibody,control sample,1,/path/to/sample_1.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,input_1,input_1 sample,2,/path/to/sample_2.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,input_1,input_1 input,1,/path/to/input_1.R1.fastq.gz,/path/to/input_1.R2.fastq.gz,, input,2,/path/to/input_2.R1.fastq.gz,/path/to/input_2.R2.fastq.gz,,","title":"Samplemanifest"},{"location":"nextflow/","text":"nextflow pipeline \u00b6 You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run champagne init first, as the config files will be accessed directly from the GitHub repo. nextflow run CCBR/CHAMPAGNE -profile test,singularity You can specify a specific version, tag, or branch on GitHub with -r : nextflow run CCBR/CHAMPAGNE -r v0.3.0 -profile test,singularity Create and use a custom reference genome: nextflow run CCBR/CHAMPAGNE -profile test -entry MAKE_REFERENCE nextflow run CCBR/CHAMPAGNE -profile test -c results/test/genome/custom_genome.config biowulf \u00b6 If you're running it on biowulf without the champagne CLI, first load the ccbrpipeliner and nextflow modules, and be sure to specify the biowulf and slurm profiles: module load ccbrpipeliner module load nextflow nextflow run CCBR/CHAMPAGNE -profile test,biowulf,slurm","title":"nextflow pipeline"},{"location":"nextflow/#nextflow-pipeline","text":"You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run champagne init first, as the config files will be accessed directly from the GitHub repo. nextflow run CCBR/CHAMPAGNE -profile test,singularity You can specify a specific version, tag, or branch on GitHub with -r : nextflow run CCBR/CHAMPAGNE -r v0.3.0 -profile test,singularity Create and use a custom reference genome: nextflow run CCBR/CHAMPAGNE -profile test -entry MAKE_REFERENCE nextflow run CCBR/CHAMPAGNE -profile test -c results/test/genome/custom_genome.config","title":"nextflow pipeline"},{"location":"nextflow/#biowulf","text":"If you're running it on biowulf without the champagne CLI, first load the ccbrpipeliner and nextflow modules, and be sure to specify the biowulf and slurm profiles: module load ccbrpipeliner module load nextflow nextflow run CCBR/CHAMPAGNE -profile test,biowulf,slurm","title":"biowulf"},{"location":"release-guide/","text":"Release Guide \u00b6 How to test a pre-release on biowulf \u00b6 Install the development version of champagne. # activate the conda env for development . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 # go to the source on biowulf and update cd /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/champagne-dev git pull # optionally switch to different branch if needed # install the version to a hidden path (e.g. .dev, .v1.0.0.9000) in /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE cd .. pip install ./champagne-dev -t ./.dev # add it to your PATH and PYTHONPATH with: export PATH = \" $PATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/bin/\" export PYTHONPATH = \" $PYTHONPATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/\"","title":"Release guide"},{"location":"release-guide/#release-guide","text":"","title":"Release Guide"},{"location":"release-guide/#how-to-test-a-pre-release-on-biowulf","text":"Install the development version of champagne. # activate the conda env for development . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 # go to the source on biowulf and update cd /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/champagne-dev git pull # optionally switch to different branch if needed # install the version to a hidden path (e.g. .dev, .v1.0.0.9000) in /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE cd .. pip install ./champagne-dev -t ./.dev # add it to your PATH and PYTHONPATH with: export PATH = \" $PATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/bin/\" export PYTHONPATH = \" $PYTHONPATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/\"","title":"How to test a pre-release on biowulf"},{"location":"workflow/","text":"Process workflow \u00b6 TODO add images to show workflow Pipeline Checks \u00b6 Input files are checked that they meet standard formatting; some file access is reviewed Processes include: INPUT_CHECK:SAMPLESHEET_CHECK INPUT_CHECK:CHECK_CONTRASTS Output directories include: check_contrasts Pre-alignment \u00b6 Adaptors are trimmed, if blacklists are included, filtering occurs Processes include: CUTADAPT FILTER_BLACKLIST:BWA_MEM FILTER_BLACKLIST:SAMTOOLS_FILTERALIGNED FILTER_BLACKLIST:PICARD_SAMTOFASTQ FILTER_BLACKLIST:CUSTOM_COUNTFASTQ Output directories include: cutadapt Alignment \u00b6 Samples are aligned using BWA; alignment stats are generated; samples are sorted and filtered Processes include: ALIGN_GENOME:BWA_MEM ALIGN_GENOME:SAMTOOLS_FLAGSTAT_ALIGN ALIGN_GENOME:FILTER_QUALITY ALIGN_GENOME:SAMTOOLS_SORT ALIGN_GENOME:SAMTOOLS_FLAGSTAT_FILTER Output directories include: bwa_mem samtools_flagstat_align samtools_filteraligned samtools_sort samtools_flagstat_filter Deduplicate \u00b6 Processes include: DEDUPLICATE:MACS2_DEDUP DEDUPLICATE:INDEX_SINGLE DEDUPLICATE:PICARD_DEDUP DEDUPLICATE:INDEX_PAIRED Output directories include: Quality Control \u00b6 Processes include: PPQT_PROCESS QC:FASTQC_RAW QC:FASTQC_TRIMMED QC:FASTQ_SCREE QC:PRESEQ QC:HANDLE_PRESEQ_ERROR QC:PARSE_PRESEQ_LOG QC:QC_STATS QC:QC_TABLE Deeptools analysis \u00b6 Processes include: QC:DEEPTOOLS:BAM_COVERAGE QC:DEEPTOOLS:BIGWIG_SUM QC:DEEPTOOLS:PLOT_CORRELATION QC:DEEPTOOLS:PLOT_PCA QC:DEEPTOOLS:NORMALIZE_INPUT QC:DEEPTOOLS:BED_PROTEIN_CODING QC:DEEPTOOLS:COMPUTE_MATRIX QC:DEEPTOOLS:PLOT_HEATMAP QC:DEEPTOOLS:PLOT_PROFILE QC:DEEPTOOLS:PLOT_FINGERPRINT Peak calling \u00b6 Processes include: PHANTOM_PEAKS CALL_PEAKS:CALC_GENOME_FRAC CALL_PEAKS:BAM_TO_BED CALL_PEAKS:MACS_BROAD CALL_PEAKS:MACS_NARROW CALL_PEAKS:SICER CALL_PEAKS:CONVERT_SICER CALL_PEAKS:GEM CALL_PEAKS:FILTER_GEM CALL_PEAKS:FRACTION_IN_PEAKS CALL_PEAKS:CONCAT_FRIPS CALL_PEAKS:PLOT_FRIP CALL_PEAKS:GET_PEAK_META CALL_PEAKS:CONCAT_PEAK_META CALL_PEAKS:PLOT_PEAK_WIDTHS Consensus Peaks \u00b6 Processes include: CONSENSUS_PEAKS:CAT_CAT CONSENSUS_PEAKS:SORT_BED CONSENSUS_PEAKS:BEDTOOLS_MERGE CONSENSUS_PEAKS:- CONSENSUS_PEAKS:_OUT Annotate \u00b6 Processes include: ANNOTATE:CHIPSEEKER_PEAKPLOT ANNOTATE:CHIPSEEKER_ANNOTATE ANNOTATE:CHIPSEEKER_PLOTLIST ANNOTATE:HOMER_MOTIFS ANNOTATE:MEME_AME Differential Analysis \u00b6 If there are more than 2 replicates per group then diffbind is performed; otherwise manorm pairewise analysis is performed Processes include: DIFF:DIFFBIND:PREP_DIFFBIND DIFF:DIFFBIND:DIFFBIND_RMD DIFF:MANORM:MANORM_PAIRWISE","title":"Workflow Overview"},{"location":"workflow/#process-workflow","text":"TODO add images to show workflow","title":"Process workflow"},{"location":"workflow/#pipeline-checks","text":"Input files are checked that they meet standard formatting; some file access is reviewed Processes include: INPUT_CHECK:SAMPLESHEET_CHECK INPUT_CHECK:CHECK_CONTRASTS Output directories include: check_contrasts","title":"Pipeline Checks"},{"location":"workflow/#pre-alignment","text":"Adaptors are trimmed, if blacklists are included, filtering occurs Processes include: CUTADAPT FILTER_BLACKLIST:BWA_MEM FILTER_BLACKLIST:SAMTOOLS_FILTERALIGNED FILTER_BLACKLIST:PICARD_SAMTOFASTQ FILTER_BLACKLIST:CUSTOM_COUNTFASTQ Output directories include: cutadapt","title":"Pre-alignment"},{"location":"workflow/#alignment","text":"Samples are aligned using BWA; alignment stats are generated; samples are sorted and filtered Processes include: ALIGN_GENOME:BWA_MEM ALIGN_GENOME:SAMTOOLS_FLAGSTAT_ALIGN ALIGN_GENOME:FILTER_QUALITY ALIGN_GENOME:SAMTOOLS_SORT ALIGN_GENOME:SAMTOOLS_FLAGSTAT_FILTER Output directories include: bwa_mem samtools_flagstat_align samtools_filteraligned samtools_sort samtools_flagstat_filter","title":"Alignment"},{"location":"workflow/#deduplicate","text":"Processes include: DEDUPLICATE:MACS2_DEDUP DEDUPLICATE:INDEX_SINGLE DEDUPLICATE:PICARD_DEDUP DEDUPLICATE:INDEX_PAIRED Output directories include:","title":"Deduplicate"},{"location":"workflow/#quality-control","text":"Processes include: PPQT_PROCESS QC:FASTQC_RAW QC:FASTQC_TRIMMED QC:FASTQ_SCREE QC:PRESEQ QC:HANDLE_PRESEQ_ERROR QC:PARSE_PRESEQ_LOG QC:QC_STATS QC:QC_TABLE","title":"Quality Control"},{"location":"workflow/#deeptools-analysis","text":"Processes include: QC:DEEPTOOLS:BAM_COVERAGE QC:DEEPTOOLS:BIGWIG_SUM QC:DEEPTOOLS:PLOT_CORRELATION QC:DEEPTOOLS:PLOT_PCA QC:DEEPTOOLS:NORMALIZE_INPUT QC:DEEPTOOLS:BED_PROTEIN_CODING QC:DEEPTOOLS:COMPUTE_MATRIX QC:DEEPTOOLS:PLOT_HEATMAP QC:DEEPTOOLS:PLOT_PROFILE QC:DEEPTOOLS:PLOT_FINGERPRINT","title":"Deeptools analysis"},{"location":"workflow/#peak-calling","text":"Processes include: PHANTOM_PEAKS CALL_PEAKS:CALC_GENOME_FRAC CALL_PEAKS:BAM_TO_BED CALL_PEAKS:MACS_BROAD CALL_PEAKS:MACS_NARROW CALL_PEAKS:SICER CALL_PEAKS:CONVERT_SICER CALL_PEAKS:GEM CALL_PEAKS:FILTER_GEM CALL_PEAKS:FRACTION_IN_PEAKS CALL_PEAKS:CONCAT_FRIPS CALL_PEAKS:PLOT_FRIP CALL_PEAKS:GET_PEAK_META CALL_PEAKS:CONCAT_PEAK_META CALL_PEAKS:PLOT_PEAK_WIDTHS","title":"Peak calling"},{"location":"workflow/#consensus-peaks","text":"Processes include: CONSENSUS_PEAKS:CAT_CAT CONSENSUS_PEAKS:SORT_BED CONSENSUS_PEAKS:BEDTOOLS_MERGE CONSENSUS_PEAKS:- CONSENSUS_PEAKS:_OUT","title":"Consensus Peaks"},{"location":"workflow/#annotate","text":"Processes include: ANNOTATE:CHIPSEEKER_PEAKPLOT ANNOTATE:CHIPSEEKER_ANNOTATE ANNOTATE:CHIPSEEKER_PLOTLIST ANNOTATE:HOMER_MOTIFS ANNOTATE:MEME_AME","title":"Annotate"},{"location":"workflow/#differential-analysis","text":"If there are more than 2 replicates per group then diffbind is performed; otherwise manorm pairewise analysis is performed Processes include: DIFF:DIFFBIND:PREP_DIFFBIND DIFF:DIFFBIND:DIFFBIND_RMD DIFF:MANORM:MANORM_PAIRWISE","title":"Differential Analysis"}]}
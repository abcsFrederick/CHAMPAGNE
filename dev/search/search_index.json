{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CHAMPAGNE \ud83c\udf7e \u00b6 CH rom A tin i M muno P recipit A tion sequencin G a N alysis pip E line View the full documentation website: https://ccbr.github.io/CHAMPAGNE Set up \u00b6 Champagne is installed on the Biowulf HPC . For installation in other execution environments, refer to the docs . Biowulf \u00b6 Champagne is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session, then load the module: # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # load the ccbrpipeliner module module load ccbrpipeliner Quickstart \u00b6 Initialize and run champagne with test data: # copy the champagne config files to your project directory. # --output is optional and defaults to your current working directory. champagne init --output /data/ $USER /champagne_project # preview the champagne jobs that will run with the test dataset champagne run --output /data/ $USER /champagne_project \\ --mode local -profile test -preview # launch a champagne run on slurm with the test dataset champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile test To run champagne on your own data, you'll need to create a sample sheet. Take a look at these examples: assets/samplesheet_test.csv - mix of single and paired end reads downloaded from github. assets/samplesheet_full_mm10.csv - single end reads on biowulf. Once you've created a samplesheet with paths to your fastq files, run champagne with the --input option to specify the path to your sample sheet: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --input samplesheet.csv \\ --genome hg38 Parameters \u00b6 You can specify workflow parameters via the command line or in a YAML file. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You can then use these parameters with the -params-file option: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ -params-file assets/params.yml View the full list of parameters in the documentation. Reference Genomes \u00b6 View the list of available reference genomes to see which genomes are pre-configured for use with champagne on biowulf. If you'd like to use a genome that's not already available, view the guide on preparing a custom reference genome . Spike-in Control \u00b6 If your experiment uses a spike-in control, you can specify the spike-in genome with the --spike_genome parameter: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --input samplesheet.csv \\ --genome hg38 \\ --spike_genome dmelr6.32 \\ --deeptools_normalize_using None View the spike-in docs for more information on how to use & customize spike-in controls. Help & Contributing \u00b6 Come across a bug ? Open an issue and include a minimal reproducible example. Have a question ? Ask it in discussions . Want to contribute to this project? Check out the contributing guidelines . General Inquiries and Collaboration: Please contact the CCBR Pipeliner team at CCBR_Pipeliner@mail.nih.gov . References \u00b6 This repo was originally generated from the CCBR Nextflow Template . The template takes inspiration from nektool 1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions 2 . nektool https://github.com/beardymcjohnface/nektool \u21a9 instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9","title":"Home"},{"location":"#champagne","text":"CH rom A tin i M muno P recipit A tion sequencin G a N alysis pip E line View the full documentation website: https://ccbr.github.io/CHAMPAGNE","title":"CHAMPAGNE \ud83c\udf7e"},{"location":"#set-up","text":"Champagne is installed on the Biowulf HPC . For installation in other execution environments, refer to the docs .","title":"Set up"},{"location":"#biowulf","text":"Champagne is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session, then load the module: # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # load the ccbrpipeliner module module load ccbrpipeliner","title":"Biowulf"},{"location":"#quickstart","text":"Initialize and run champagne with test data: # copy the champagne config files to your project directory. # --output is optional and defaults to your current working directory. champagne init --output /data/ $USER /champagne_project # preview the champagne jobs that will run with the test dataset champagne run --output /data/ $USER /champagne_project \\ --mode local -profile test -preview # launch a champagne run on slurm with the test dataset champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile test To run champagne on your own data, you'll need to create a sample sheet. Take a look at these examples: assets/samplesheet_test.csv - mix of single and paired end reads downloaded from github. assets/samplesheet_full_mm10.csv - single end reads on biowulf. Once you've created a samplesheet with paths to your fastq files, run champagne with the --input option to specify the path to your sample sheet: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --input samplesheet.csv \\ --genome hg38","title":"Quickstart"},{"location":"#parameters","text":"You can specify workflow parameters via the command line or in a YAML file. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You can then use these parameters with the -params-file option: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ -params-file assets/params.yml View the full list of parameters in the documentation.","title":"Parameters"},{"location":"#reference-genomes","text":"View the list of available reference genomes to see which genomes are pre-configured for use with champagne on biowulf. If you'd like to use a genome that's not already available, view the guide on preparing a custom reference genome .","title":"Reference Genomes"},{"location":"#spike-in-control","text":"If your experiment uses a spike-in control, you can specify the spike-in genome with the --spike_genome parameter: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --input samplesheet.csv \\ --genome hg38 \\ --spike_genome dmelr6.32 \\ --deeptools_normalize_using None View the spike-in docs for more information on how to use & customize spike-in controls.","title":"Spike-in Control"},{"location":"#help-contributing","text":"Come across a bug ? Open an issue and include a minimal reproducible example. Have a question ? Ask it in discussions . Want to contribute to this project? Check out the contributing guidelines . General Inquiries and Collaboration: Please contact the CCBR Pipeliner team at CCBR_Pipeliner@mail.nih.gov .","title":"Help &amp; Contributing"},{"location":"#references","text":"This repo was originally generated from the CCBR Nextflow Template . The template takes inspiration from nektool 1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions 2 . nektool https://github.com/beardymcjohnface/nektool \u21a9 instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9","title":"References"},{"location":"_genomes_tail/","text":"Custom blacklist \u00b6 If you'd like to override the default blacklist used by one of the built-in genomes, you can provide a custom blacklist bed file or fasta file: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --genome hg38 \\ --blacklist /path/to/blacklist.bed If you're providing a custom blacklist bed file, make sure its regions refer to the genome version you're using. Custom reference genome \u00b6 If you'd like to use a genome not available on Biowulf, you can prepare a custom genome with the MAKE_REFERENCE entrypoint. If you'd like to use a custom genome, you'll need the following files: genome fasta genome GTF blacklist fasta Prepare your custom reference genome with: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ -entry MAKE_REFERENCE \\ --genome custom_genome \\ --genome_fasta genome.fasta \\ --genes_gtf genome.gtf \\ --blacklist blacklist.fasta The reference files and a config file for the genome will be written in results/genome/custom_genome/ . Then you can run champagne using your custom genome: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ --input samplesheet.csv \\ --genome custom_genome \\ -c results/genome/custom_genome/custom_genome.config","title":" genomes tail"},{"location":"_genomes_tail/#custom-blacklist","text":"If you'd like to override the default blacklist used by one of the built-in genomes, you can provide a custom blacklist bed file or fasta file: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --genome hg38 \\ --blacklist /path/to/blacklist.bed If you're providing a custom blacklist bed file, make sure its regions refer to the genome version you're using.","title":"Custom blacklist"},{"location":"_genomes_tail/#custom-reference-genome","text":"If you'd like to use a genome not available on Biowulf, you can prepare a custom genome with the MAKE_REFERENCE entrypoint. If you'd like to use a custom genome, you'll need the following files: genome fasta genome GTF blacklist fasta Prepare your custom reference genome with: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ -entry MAKE_REFERENCE \\ --genome custom_genome \\ --genome_fasta genome.fasta \\ --genes_gtf genome.gtf \\ --blacklist blacklist.fasta The reference files and a config file for the genome will be written in results/genome/custom_genome/ . Then you can run champagne using your custom genome: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ --input samplesheet.csv \\ --genome custom_genome \\ -c results/genome/custom_genome/custom_genome.config","title":"Custom reference genome"},{"location":"_params_head/","text":"How to set pipeline parameters \u00b6 Any parameter can be set via the CLI using two hyphens ( -- ) followed by the parameter name and value. For example: champagne run --output /data/ $USER /champagne_project \\ --input assets/samplesheet_full_mm10.csv \\ --contrasts assets/contrasts_full_mm10.csv \\ --genome mm10 \\ --run_gem false \\ --run_chipseeker false \\ --run_qc true Alternatively, you can create a YAML file with the parameters you want to set. This is useful for managing multiple parameters or for sharing configurations with others. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You can then use these parameters with the -params-file option: champagne run --output /data/ $USER /champagne_project \\ -params-file assets/params.yml View the full list of pipeline parameters below.","title":"How to set pipeline parameters"},{"location":"_params_head/#how-to-set-pipeline-parameters","text":"Any parameter can be set via the CLI using two hyphens ( -- ) followed by the parameter name and value. For example: champagne run --output /data/ $USER /champagne_project \\ --input assets/samplesheet_full_mm10.csv \\ --contrasts assets/contrasts_full_mm10.csv \\ --genome mm10 \\ --run_gem false \\ --run_chipseeker false \\ --run_qc true Alternatively, you can create a YAML file with the parameters you want to set. This is useful for managing multiple parameters or for sharing configurations with others. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You can then use these parameters with the -params-file option: champagne run --output /data/ $USER /champagne_project \\ -params-file assets/params.yml View the full list of pipeline parameters below.","title":"How to set pipeline parameters"},{"location":"changelog/","text":"Changelog \u00b6 CHAMPAGNE development version \u00b6 CHAMPAGNE 0.5.1 \u00b6 Minor documentation improvements. (#273, @kelly-sovacool) Set --blacklist to a custom bed or fasta file to override the default blacklist used by a built-in --genome . (#278, @kelly-sovacool) Also add support for the hg19 genome on biowulf. Fix spike-in normalization: (#279, @kelly-sovacool) Do not include inputs in the scale factor calculation. Group samples by antibody for scale factor calculation. Create separate parameters for controlling the deeptools normalization method for samples and inputs. CHAMPAGNE 0.5.0 \u00b6 CHAMPAGNE now depends on ccbr_tools v0.4 for updated jobby & spooker utilities. (#247, @kelly-sovacool) Reorganized output directory structure. (#256, @kelly-sovacool) Nextflow parameters are now validated at the start of the workflow. (#257, @kelly-sovacool) New features \u00b6 Contrasts are now specified as a TSV file instead of YAML. (#224, @kelly-sovacool) See the example contrast sheets in assets/ . New consensus peak method from Corces et al. ( doi:10.1126/science.aav1898 ). (#225, #246, @kelly-sovacool) Normalization with a spike-in genome is now supported. (#259, @kelly-sovacool) Set params.spike_genome to dmelr6.32 or ecoli_k12 The normalization method can be set with params.spike_norm_method to delorenzi (default) or guenther . (#267, @kelly-sovacool) CLI improvements Use nextflow run -resume by default, or turn it off with champagne run --forceall . (#224, @kelly-sovacool) Add --output argument for champagne init and champagne run . (#232, #233, @kelly-sovacool) This is equivalent to the nextflow launchDir constant. --mode now has slurm as the default. (#249, @kelly-sovacool) Improved nextflow options: Set publish_dir_mode to link by default. Set process.cache to deep by default rather than lenient. (#224, @kelly-sovacool) Enable the nextflow timeline & trace reports by default. (#226, @kelly-sovacool) Output BioCompute objects by default using the nf-prov plugin. (#260, @kelly-sovacool) Bug fixes \u00b6 Refactor checks for the sample sheet & contrast sheet to prevent unnecessary re-running. (#224, @kelly-sovacool) Fix a file name clash during input pooling. (#224, @kelly-sovacool) Fix bug in MEME AME process that caused it not to run on all samples. (#234, @kelly-sovacool) Also correct the motif rank calculation. (#234, @kopardev) Ensure inputs are pooled correctly for paired end reads. (#250, @kelly-sovacool) Fix chipseeker filename collision. (#252, @kelly-sovacool) Allow fraction-in-peaks plot to run when there is only 1 sample. (#265, @kelly-sovacool) Documentation \u00b6 Now using the readthedocs theme for the docs website. (#236, @kelly-sovacool) Improved help message for champagne run . (#249, @kelly-sovacool) Major improvements to fill out the documentation website. (#262, #263, @kelly-sovacool) CHAMPAGNE 0.4.1 \u00b6 The CHAMPAGNE nextflow workflow now has a version entry in nextflow.config , in compliance with nf-core. (#213, @kelly-sovacool) Pool input (control) reads of the same sample name by default. Any inputs that should not be pooled must have different sample names in the samplesheet. (#214, @kelly-sovacool) Add histone samples to the test_human dataset. (#215, @kelly-sovacool) CHAMPAGNE 0.4.0 \u00b6 New features \u00b6 Create a script ( bin/champagne ) to provide an interface to the champagne CLI that works out-of-the-box without the need to install the python package with pip . (#180, @kelly-sovacool) However, any dependencies not in the Python Standard Library must be installed for this to work. See the dependencies list in pyproject.toml . Allow additional columns in the sample sheet beyond the minimum required header. (#176, @kelly-sovacool) Add a workflow entry point to download fastq files from SRA. (#176, @kelly-sovacool) Add test_human profile with chipseq data from ENCODE. (#176, @kelly-sovacool) Bug fixes \u00b6 Fix configuration files for compatibility with using the GitHub repo as the source. (#173, @kelly-sovacool) These equivalent commands now work: nextflow run CCBR/CHAMPAGNE champagne run --main CCBR/CHAMPAGNE Allow multiple samples to use the same input. (#176, @kelly-sovacool) In the biowulf config profile, switch variable $SLURM_JOBID to $SLURM_JOB_ID. (@kelly-sovacool) Increase resource allocations for chipseeker and deeptools. (#192, @slsevilla) Check the validity of the contrastsheet earlier on in the workflow. (#192, @slsevilla; #200, @kelly-sovacool) Fix bug where manorm was using R1 twice instead of R1 and R2. (#206, @kelly-sovacool) Misc \u00b6 Change the peak widths histogram type from overlay to stack. (#176, @kelly-sovacool) Documentation improvements. (#192, @slsevilla) CHAMPAGNE 0.3.0 \u00b6 New features \u00b6 Find motifs in the genome with Homer. (#142) Run motif enrichment analysis with MEME. (#142) Annotate peaks with chipseeker. (#142,#147,#157) Add preseq complexity curve and fastq screen to multiqc report. (#147) Support multiple replicates per sample and call consensus peaks on replicates. (#129) Optionally normalize p-values with the CCBR/consensus_peaks subworkflow. Implement differential peak calling. (#158) Optionally specify contrasts via a YAML file. If no file is specified, differential analysis is not performed. If any sample has only one replicate, run MAnorm , otherwise run diffbind . Print the recommended citation in bibtex format with champagne --citation . (#153) CHAMPAGNE is also now archived in Zenodo with DOI 10.5281/zenodo.10516078 . The docs website now has a dropdown menu to select which version to view. The latest release is shown by default. (#170) Bug fixes \u00b6 Fix deepTools plots (#144): Per sample fingerprint plots instead of per replicate. Input normalized profile plots. Protein-coding-only versions of plots. Ensure sample IDs are sorted. (#150) Fix a bug where the wrong SICER output file was used for downstream analyses. (#155) Fix CLI profile on machines other than biowulf & FRCE. (#168) Fix broken bold styling in documentation website. (#53) CHAMPAGNE 0.2.2 \u00b6 Fix permissions issues in the CLI. (#167) CHAMPAGNE 0.2.1 \u00b6 Fix a bug in QC stats that mixed up the statistics for different samples. (#125) Fix a bug in the CLI that added the -profile to the nextflow command even if it wasn't needed (#125). Report read counts between blacklist & filtering steps in the QC table. (#125) Run spooker on workflow completion (#126). CHAMPAGNE 0.2.0 \u00b6 New features \u00b6 Implement peak calling with sicer2, macs2, and gem. (#52) Add parameter options to skip QC, input normalization, and/or peak calling steps. (#72) Calculate and plot QC metrics for called peaks: Fraction in Peaks (FRiP) (#89) Jaccard index (#92) Histogram of peak widths (#92) Add support for paired-end reads. (#105) Add an option to use a custom reference from a genome fasta, gtf, and blacklist file. (#105) Champagne CLI: (#112) New --mode option for champagne run to execute the workflow locally ('local') or submit it as a slurm job ('slurm'). Option to override the path to the champagne main.nf file or specify the github repo ( CCBR/CHAMPAGNE ) instead. # use the default path champagne run ... # override the path champagne run path/to/champagne/main.nf # use a revision from github instead champagne run CCBR/CHAMPAGNE -r v0.1.0 Bug fixes \u00b6 CLI: Error when biowulf-specific environment variables are not defined. (#54) The host is now correctly detected as biowulf via scontrol . (#75) Containers: Containers are now specified in process definitions instead of withName / withLabel for better control. (#69) Shared containers are specified as parameters in the config file conf/containers.config . No longer use --mount type=bind or --volume for making directories available to processes in containers. Instead, use Nextflow's Channel.fromPath constructor with type: 'dir' . (#71) API-breaking changes \u00b6 An error is thrown when a required input file doesn't exist. (#71) Previously, the workflow quietly didn't run the process(es) that required the missing file. Renamed champagne config to champagne init to avoid clashing with nextflow config . (#112) CHAMPAGNE 0.1.0 \u00b6 Quality control steps implemented for single-end reads \u00b6 Trim raw reads, FastQC on raw and trimmed reads, and FastQ Screen on trimmed reads. Exclude reads that align to blacklist regions, align remaining reads to the reference genome, and deduplicate. Preseq on aligned reads. Phantompeakqualtools on aligned and deduplicated reads. Process reads with deepTools: bam coverage to generate bigwigs for each sample, summarize all bigwigs, and compute matrices relative to TSSs and scaled to metagene regions. Generate plots with deepTools: PCA, profile, heatmap, spearman correlation, and fingerprint plots. Summarize all quality control steps in a MultiQC report. Input-normalize ChIP fragments for the next stage of the pipeline.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#champagne-development-version","text":"","title":"CHAMPAGNE development version"},{"location":"changelog/#champagne-051","text":"Minor documentation improvements. (#273, @kelly-sovacool) Set --blacklist to a custom bed or fasta file to override the default blacklist used by a built-in --genome . (#278, @kelly-sovacool) Also add support for the hg19 genome on biowulf. Fix spike-in normalization: (#279, @kelly-sovacool) Do not include inputs in the scale factor calculation. Group samples by antibody for scale factor calculation. Create separate parameters for controlling the deeptools normalization method for samples and inputs.","title":"CHAMPAGNE 0.5.1"},{"location":"changelog/#champagne-050","text":"CHAMPAGNE now depends on ccbr_tools v0.4 for updated jobby & spooker utilities. (#247, @kelly-sovacool) Reorganized output directory structure. (#256, @kelly-sovacool) Nextflow parameters are now validated at the start of the workflow. (#257, @kelly-sovacool)","title":"CHAMPAGNE 0.5.0"},{"location":"changelog/#new-features","text":"Contrasts are now specified as a TSV file instead of YAML. (#224, @kelly-sovacool) See the example contrast sheets in assets/ . New consensus peak method from Corces et al. ( doi:10.1126/science.aav1898 ). (#225, #246, @kelly-sovacool) Normalization with a spike-in genome is now supported. (#259, @kelly-sovacool) Set params.spike_genome to dmelr6.32 or ecoli_k12 The normalization method can be set with params.spike_norm_method to delorenzi (default) or guenther . (#267, @kelly-sovacool) CLI improvements Use nextflow run -resume by default, or turn it off with champagne run --forceall . (#224, @kelly-sovacool) Add --output argument for champagne init and champagne run . (#232, #233, @kelly-sovacool) This is equivalent to the nextflow launchDir constant. --mode now has slurm as the default. (#249, @kelly-sovacool) Improved nextflow options: Set publish_dir_mode to link by default. Set process.cache to deep by default rather than lenient. (#224, @kelly-sovacool) Enable the nextflow timeline & trace reports by default. (#226, @kelly-sovacool) Output BioCompute objects by default using the nf-prov plugin. (#260, @kelly-sovacool)","title":"New features"},{"location":"changelog/#bug-fixes","text":"Refactor checks for the sample sheet & contrast sheet to prevent unnecessary re-running. (#224, @kelly-sovacool) Fix a file name clash during input pooling. (#224, @kelly-sovacool) Fix bug in MEME AME process that caused it not to run on all samples. (#234, @kelly-sovacool) Also correct the motif rank calculation. (#234, @kopardev) Ensure inputs are pooled correctly for paired end reads. (#250, @kelly-sovacool) Fix chipseeker filename collision. (#252, @kelly-sovacool) Allow fraction-in-peaks plot to run when there is only 1 sample. (#265, @kelly-sovacool)","title":"Bug fixes"},{"location":"changelog/#documentation","text":"Now using the readthedocs theme for the docs website. (#236, @kelly-sovacool) Improved help message for champagne run . (#249, @kelly-sovacool) Major improvements to fill out the documentation website. (#262, #263, @kelly-sovacool)","title":"Documentation"},{"location":"changelog/#champagne-041","text":"The CHAMPAGNE nextflow workflow now has a version entry in nextflow.config , in compliance with nf-core. (#213, @kelly-sovacool) Pool input (control) reads of the same sample name by default. Any inputs that should not be pooled must have different sample names in the samplesheet. (#214, @kelly-sovacool) Add histone samples to the test_human dataset. (#215, @kelly-sovacool)","title":"CHAMPAGNE 0.4.1"},{"location":"changelog/#champagne-040","text":"","title":"CHAMPAGNE 0.4.0"},{"location":"changelog/#new-features_1","text":"Create a script ( bin/champagne ) to provide an interface to the champagne CLI that works out-of-the-box without the need to install the python package with pip . (#180, @kelly-sovacool) However, any dependencies not in the Python Standard Library must be installed for this to work. See the dependencies list in pyproject.toml . Allow additional columns in the sample sheet beyond the minimum required header. (#176, @kelly-sovacool) Add a workflow entry point to download fastq files from SRA. (#176, @kelly-sovacool) Add test_human profile with chipseq data from ENCODE. (#176, @kelly-sovacool)","title":"New features"},{"location":"changelog/#bug-fixes_1","text":"Fix configuration files for compatibility with using the GitHub repo as the source. (#173, @kelly-sovacool) These equivalent commands now work: nextflow run CCBR/CHAMPAGNE champagne run --main CCBR/CHAMPAGNE Allow multiple samples to use the same input. (#176, @kelly-sovacool) In the biowulf config profile, switch variable $SLURM_JOBID to $SLURM_JOB_ID. (@kelly-sovacool) Increase resource allocations for chipseeker and deeptools. (#192, @slsevilla) Check the validity of the contrastsheet earlier on in the workflow. (#192, @slsevilla; #200, @kelly-sovacool) Fix bug where manorm was using R1 twice instead of R1 and R2. (#206, @kelly-sovacool)","title":"Bug fixes"},{"location":"changelog/#misc","text":"Change the peak widths histogram type from overlay to stack. (#176, @kelly-sovacool) Documentation improvements. (#192, @slsevilla)","title":"Misc"},{"location":"changelog/#champagne-030","text":"","title":"CHAMPAGNE 0.3.0"},{"location":"changelog/#new-features_2","text":"Find motifs in the genome with Homer. (#142) Run motif enrichment analysis with MEME. (#142) Annotate peaks with chipseeker. (#142,#147,#157) Add preseq complexity curve and fastq screen to multiqc report. (#147) Support multiple replicates per sample and call consensus peaks on replicates. (#129) Optionally normalize p-values with the CCBR/consensus_peaks subworkflow. Implement differential peak calling. (#158) Optionally specify contrasts via a YAML file. If no file is specified, differential analysis is not performed. If any sample has only one replicate, run MAnorm , otherwise run diffbind . Print the recommended citation in bibtex format with champagne --citation . (#153) CHAMPAGNE is also now archived in Zenodo with DOI 10.5281/zenodo.10516078 . The docs website now has a dropdown menu to select which version to view. The latest release is shown by default. (#170)","title":"New features"},{"location":"changelog/#bug-fixes_2","text":"Fix deepTools plots (#144): Per sample fingerprint plots instead of per replicate. Input normalized profile plots. Protein-coding-only versions of plots. Ensure sample IDs are sorted. (#150) Fix a bug where the wrong SICER output file was used for downstream analyses. (#155) Fix CLI profile on machines other than biowulf & FRCE. (#168) Fix broken bold styling in documentation website. (#53)","title":"Bug fixes"},{"location":"changelog/#champagne-022","text":"Fix permissions issues in the CLI. (#167)","title":"CHAMPAGNE 0.2.2"},{"location":"changelog/#champagne-021","text":"Fix a bug in QC stats that mixed up the statistics for different samples. (#125) Fix a bug in the CLI that added the -profile to the nextflow command even if it wasn't needed (#125). Report read counts between blacklist & filtering steps in the QC table. (#125) Run spooker on workflow completion (#126).","title":"CHAMPAGNE 0.2.1"},{"location":"changelog/#champagne-020","text":"","title":"CHAMPAGNE 0.2.0"},{"location":"changelog/#new-features_3","text":"Implement peak calling with sicer2, macs2, and gem. (#52) Add parameter options to skip QC, input normalization, and/or peak calling steps. (#72) Calculate and plot QC metrics for called peaks: Fraction in Peaks (FRiP) (#89) Jaccard index (#92) Histogram of peak widths (#92) Add support for paired-end reads. (#105) Add an option to use a custom reference from a genome fasta, gtf, and blacklist file. (#105) Champagne CLI: (#112) New --mode option for champagne run to execute the workflow locally ('local') or submit it as a slurm job ('slurm'). Option to override the path to the champagne main.nf file or specify the github repo ( CCBR/CHAMPAGNE ) instead. # use the default path champagne run ... # override the path champagne run path/to/champagne/main.nf # use a revision from github instead champagne run CCBR/CHAMPAGNE -r v0.1.0","title":"New features"},{"location":"changelog/#bug-fixes_3","text":"CLI: Error when biowulf-specific environment variables are not defined. (#54) The host is now correctly detected as biowulf via scontrol . (#75) Containers: Containers are now specified in process definitions instead of withName / withLabel for better control. (#69) Shared containers are specified as parameters in the config file conf/containers.config . No longer use --mount type=bind or --volume for making directories available to processes in containers. Instead, use Nextflow's Channel.fromPath constructor with type: 'dir' . (#71)","title":"Bug fixes"},{"location":"changelog/#api-breaking-changes","text":"An error is thrown when a required input file doesn't exist. (#71) Previously, the workflow quietly didn't run the process(es) that required the missing file. Renamed champagne config to champagne init to avoid clashing with nextflow config . (#112)","title":"API-breaking changes"},{"location":"changelog/#champagne-010","text":"","title":"CHAMPAGNE 0.1.0"},{"location":"changelog/#quality-control-steps-implemented-for-single-end-reads","text":"Trim raw reads, FastQC on raw and trimmed reads, and FastQ Screen on trimmed reads. Exclude reads that align to blacklist regions, align remaining reads to the reference genome, and deduplicate. Preseq on aligned reads. Phantompeakqualtools on aligned and deduplicated reads. Process reads with deepTools: bam coverage to generate bigwigs for each sample, summarize all bigwigs, and compute matrices relative to TSSs and scaled to metagene regions. Generate plots with deepTools: PCA, profile, heatmap, spearman correlation, and fingerprint plots. Summarize all quality control steps in a MultiQC report. Input-normalize ChIP fragments for the next stage of the pipeline.","title":"Quality control steps implemented for single-end reads"},{"location":"nextflow/","text":"nextflow pipeline \u00b6 You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run champagne init first, as the config files will be accessed directly from the GitHub repo. nextflow run CCBR/CHAMPAGNE -profile test,singularity You can specify a specific version, tag, or branch on GitHub with -r : nextflow run CCBR/CHAMPAGNE -r v0.3.0 -profile test,singularity Create and use a custom reference genome: nextflow run CCBR/CHAMPAGNE -profile test -entry MAKE_REFERENCE nextflow run CCBR/CHAMPAGNE -profile test -c results/test/genome/custom_genome.config biowulf \u00b6 If you're running it on biowulf without the champagne CLI, first load the ccbrpipeliner and nextflow modules, and be sure to specify the biowulf and slurm profiles: module load ccbrpipeliner module load nextflow/25 nextflow run CCBR/CHAMPAGNE -profile test,biowulf,slurm","title":"nextflow pipeline"},{"location":"nextflow/#nextflow-pipeline","text":"You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run champagne init first, as the config files will be accessed directly from the GitHub repo. nextflow run CCBR/CHAMPAGNE -profile test,singularity You can specify a specific version, tag, or branch on GitHub with -r : nextflow run CCBR/CHAMPAGNE -r v0.3.0 -profile test,singularity Create and use a custom reference genome: nextflow run CCBR/CHAMPAGNE -profile test -entry MAKE_REFERENCE nextflow run CCBR/CHAMPAGNE -profile test -c results/test/genome/custom_genome.config","title":"nextflow pipeline"},{"location":"nextflow/#biowulf","text":"If you're running it on biowulf without the champagne CLI, first load the ccbrpipeliner and nextflow modules, and be sure to specify the biowulf and slurm profiles: module load ccbrpipeliner module load nextflow/25 nextflow run CCBR/CHAMPAGNE -profile test,biowulf,slurm","title":"biowulf"},{"location":"devs/contributing/","text":"Contributing to CHAMPAGNE \u00b6 Proposing changes with issues \u00b6 If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed. If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it. Pull request process \u00b6 We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to CHAMPAGNE. Clone the repo \u00b6 If you are a member of CCBR , you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once. git clone https://github.com/CCBR/CHAMPAGNE Cloning into 'CHAMPAGNE'... remote: Enumerating objects: 1136, done. remote: Counting objects: 100% (463/463), done. remote: Compressing objects: 100% (357/357), done. remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673 Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done. Resolving deltas: 100% (530/530), done. cd CHAMPAGNE If this is your first time cloning the repo, you may need to install dependencies \u00b6 Install nextflow and singularity or docker if needed (biowulf already has these available as modules). Install the python dependencies with pip pip install . If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 Install pre-commit if you don't already have it. Then from the repo's root directory, run pre-commit install This will install the repo's pre-commit hooks. You'll only need to do this step the first time you clone the repo. Create a branch \u00b6 Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as iss-10 if it is for a specific issue. # create a new branch and switch to it git branch iss-10 git switch iss-10 Switched to a new branch 'iss-10' Make your changes \u00b6 Edit the code, write and run tests, and update the documentation as needed. test \u00b6 Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the tests/ subdirectory. Run the tests with python -m pytest . If you change the workflow , please run the workflow with the test profile and make sure your new feature or bug fix works as intended. document \u00b6 If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in docs/ . Commit and push your changes \u00b6 If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/ First, add the files that you changed to the staging area: git add path/to/changed/files/ Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as feat , fix , docs , etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages. git commit -m 'feat: create function for awesome feature' pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Failed hook id: trailing-whitespace exit code: 1 files were modified by this hook > Fixing path/to/changed/files/file.txt > codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run git diff to see the changes that pre-commit made and git status to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command: git add path/to/changed/files/file.txt git commit -m 'feat: create function for awesome feature' This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Passed codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped Conventional Commit......................................................Passed > [iss-10 9ff256e] feat: create function for awesome feature 1 file changed, 22 insertions(+), 3 deletions(-) Finally, push your changes to GitHub: git push If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch: git push --set-upstream origin iss-10 Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 10 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done. Total 4 (delta 3), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (3/3), completed with 3 local objects. remote: remote: Create a pull request for 'iss-10' on GitHub by visiting: remote: https://github.com/CCBR/CHAMPAGNE/pull/new/iss-10 remote: To https://github.com/CCBR/CHAMPAGNE > > [new branch] iss-10 -> iss-10 branch 'iss-10' set up to track 'origin/iss-10'. We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at https://github.com/CCBR/CHAMPAGNE/tree/<your-branch-name> (replace <your-branch-name> with the actual name of your branch). Create the PR \u00b6 Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/CHAMPAGNE/pull/new/ Select the branch you just pushed: Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <!-- and --> ) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it. Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready. Wait for a maintainer to review your PR \u00b6 We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/ . The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR. Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution! After your PR has been merged \u00b6 After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes: git checkout main git pull It's a good idea to run git pull before creating a new branch so it will start from the most recent commits in main. Helpful links for more information \u00b6 GitHub Flow semantic versioning guidelines changelog guidelines tidyverse code review principles reproducible examples nf-core extensions for VS Code","title":"How to contribute"},{"location":"devs/contributing/#contributing-to-champagne","text":"","title":"Contributing to CHAMPAGNE"},{"location":"devs/contributing/#proposing-changes-with-issues","text":"If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed. If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it.","title":"Proposing changes with issues"},{"location":"devs/contributing/#pull-request-process","text":"We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to CHAMPAGNE.","title":"Pull request process"},{"location":"devs/contributing/#clone-the-repo","text":"If you are a member of CCBR , you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once. git clone https://github.com/CCBR/CHAMPAGNE Cloning into 'CHAMPAGNE'... remote: Enumerating objects: 1136, done. remote: Counting objects: 100% (463/463), done. remote: Compressing objects: 100% (357/357), done. remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673 Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done. Resolving deltas: 100% (530/530), done. cd CHAMPAGNE","title":"Clone the repo"},{"location":"devs/contributing/#if-this-is-your-first-time-cloning-the-repo-you-may-need-to-install-dependencies","text":"Install nextflow and singularity or docker if needed (biowulf already has these available as modules). Install the python dependencies with pip pip install . If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 Install pre-commit if you don't already have it. Then from the repo's root directory, run pre-commit install This will install the repo's pre-commit hooks. You'll only need to do this step the first time you clone the repo.","title":"If this is your first time cloning the repo, you may need to install dependencies"},{"location":"devs/contributing/#create-a-branch","text":"Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as iss-10 if it is for a specific issue. # create a new branch and switch to it git branch iss-10 git switch iss-10 Switched to a new branch 'iss-10'","title":"Create a branch"},{"location":"devs/contributing/#make-your-changes","text":"Edit the code, write and run tests, and update the documentation as needed.","title":"Make your changes"},{"location":"devs/contributing/#test","text":"Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the tests/ subdirectory. Run the tests with python -m pytest . If you change the workflow , please run the workflow with the test profile and make sure your new feature or bug fix works as intended.","title":"test"},{"location":"devs/contributing/#document","text":"If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in docs/ .","title":"document"},{"location":"devs/contributing/#commit-and-push-your-changes","text":"If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/ First, add the files that you changed to the staging area: git add path/to/changed/files/ Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as feat , fix , docs , etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages. git commit -m 'feat: create function for awesome feature' pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Failed hook id: trailing-whitespace exit code: 1 files were modified by this hook > Fixing path/to/changed/files/file.txt > codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run git diff to see the changes that pre-commit made and git status to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command: git add path/to/changed/files/file.txt git commit -m 'feat: create function for awesome feature' This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created. Check for added large files..............................................Passed Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Passed codespell................................................................Passed style-files..........................................(no files to check)Skipped readme-rmd-rendered..................................(no files to check)Skipped use-tidy-description.................................(no files to check)Skipped Conventional Commit......................................................Passed > [iss-10 9ff256e] feat: create function for awesome feature 1 file changed, 22 insertions(+), 3 deletions(-) Finally, push your changes to GitHub: git push If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch: git push --set-upstream origin iss-10 Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 10 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done. Total 4 (delta 3), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (3/3), completed with 3 local objects. remote: remote: Create a pull request for 'iss-10' on GitHub by visiting: remote: https://github.com/CCBR/CHAMPAGNE/pull/new/iss-10 remote: To https://github.com/CCBR/CHAMPAGNE > > [new branch] iss-10 -> iss-10 branch 'iss-10' set up to track 'origin/iss-10'. We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at https://github.com/CCBR/CHAMPAGNE/tree/<your-branch-name> (replace <your-branch-name> with the actual name of your branch).","title":"Commit and push your changes"},{"location":"devs/contributing/#create-the-pr","text":"Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/CHAMPAGNE/pull/new/ Select the branch you just pushed: Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <!-- and --> ) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it. Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready.","title":"Create the PR"},{"location":"devs/contributing/#wait-for-a-maintainer-to-review-your-pr","text":"We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/ . The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR. Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution!","title":"Wait for a maintainer to review your PR"},{"location":"devs/contributing/#after-your-pr-has-been-merged","text":"After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes: git checkout main git pull It's a good idea to run git pull before creating a new branch so it will start from the most recent commits in main.","title":"After your PR has been merged"},{"location":"devs/contributing/#helpful-links-for-more-information","text":"GitHub Flow semantic versioning guidelines changelog guidelines tidyverse code review principles reproducible examples nf-core extensions for VS Code","title":"Helpful links for more information"},{"location":"devs/contributors/","text":"Contributors \u00b6 Kelly Sovacool, PhD github-actions[bot] Samantha Vishal Koparde, PhD View the contributors graph on GitHub for more details.","title":"Contributors"},{"location":"devs/contributors/#contributors","text":"Kelly Sovacool, PhD github-actions[bot] Samantha Vishal Koparde, PhD View the contributors graph on GitHub for more details.","title":"Contributors"},{"location":"devs/release-guide/","text":"Release Guide \u00b6 How to test a pre-release on biowulf \u00b6 Install the development version of champagne. # activate the conda env for development . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 # go to the source on biowulf and update cd /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/champagne-dev git pull # optionally switch to different branch if needed # install the version to a hidden path (e.g. .dev, .v1.0.0.9000) in /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE cd .. pip install ./champagne-dev -t ./.dev # add it to your PATH and PYTHONPATH with: export PATH = \" $PATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/bin/\" export PYTHONPATH = \" $PYTHONPATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/\"","title":"Release Guide"},{"location":"devs/release-guide/#release-guide","text":"","title":"Release Guide"},{"location":"devs/release-guide/#how-to-test-a-pre-release-on-biowulf","text":"Install the development version of champagne. # activate the conda env for development . \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\" conda activate py311 # go to the source on biowulf and update cd /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/champagne-dev git pull # optionally switch to different branch if needed # install the version to a hidden path (e.g. .dev, .v1.0.0.9000) in /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE cd .. pip install ./champagne-dev -t ./.dev # add it to your PATH and PYTHONPATH with: export PATH = \" $PATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/bin/\" export PYTHONPATH = \" $PYTHONPATH :/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/\"","title":"How to test a pre-release on biowulf"},{"location":"guide/genomes/","text":"Genomes \u00b6 Supported reference genomes \u00b6 These genomes are available on biowulf. Reference Genomes \u00b6 These genomes can be passed to the --genome parameter. hg38 \u00b6 species: Homo sapiens fasta: ${params.index_dir}/hg38_basic/hg38_basic.fa genes_gtf: ${params.index_dir}/hg38_basic/genes.gtf blacklist_index: ${params.index_dir}/hg38_basic/indexes/blacklist/hg38.blacklist_v3.chrM.chr_rDNA.* reference_index: ${params.index_dir}/hg38_basic/bwa_index/hg38* chromosomes_dir: ${params.index_dir}/hg38_basic/Chromsomes/ chrom_sizes: ${params.index_dir}/hg38_basic/indexes/hg38.fa.sizes gene_info: ${params.index_dir}/hg38_basic/geneinfo.bed effective_genome_size: 2700000000 meme_motifs: ${projectDir}/assets/HOCOMOCOv11_core_HUMAN_mono_meme_format.tar.gz bioc_txdb: TxDb.Hsapiens.UCSC.hg38.knownGene bioc_annot: org.Hs.eg.db hg19 \u00b6 species: Homo sapiens fasta: ${params.index_dir}/hg19_basic/hg19.fa genes_gtf: ${params.index_dir}/hg19_basic/genes.gtf blacklist_index: ${params.index_dir}/hg19_basic/indexes/blacklist/hg19.blacklist.* reference_index: ${params.index_dir}/hg19_basic/bwa_index/hg19.* chromosomes_dir: ${params.index_dir}/hg19_basic/Chromosomes chrom_sizes: ${params.index_dir}/hg19_basic/Chromosomes/chrom.sizes gene_info: ${params.index_dir}/hg19_basic/geneinfo.bed effective_genome_size: 2700000000 meme_motifs: ${projectDir}/assets/HOCOMOCOv11_core_HUMAN_mono_meme_format.tar.gz bioc_txdb: TxDb.Hsapiens.UCSC.hg38.knownGene bioc_annot: org.Hs.eg.db mm10 \u00b6 species: Mus musculus fasta: ${params.index_dir}/mm10_basic/mm10_basic.fa genes_gtf: ${params.index_dir}/mm10_basic/genes.gtf blacklist_index: ${params.index_dir}/mm10_basic/indexes/blacklist/mm10.blacklist.chrM.chr_rDNA.* reference_index: ${params.index_dir}/mm10_basic/indexes/reference/mm10* chromosomes_dir: ${params.index_dir}/mm10_basic/Chromsomes/ chrom_sizes: ${params.index_dir}/mm10_basic/indexes/mm10.fa.sizes gene_info: ${params.index_dir}/mm10_basic/geneinfo.bed effective_genome_size: 2400000000 meme_motifs: ${projectDir}/assets/HOCOMOCOv11_core_MOUSE_mono_meme_format.tar.gz bioc_txdb: TxDb.Mmusculus.UCSC.mm10.knownGene bioc_annot: org.Mmu.eg.db Spike-in Genomes \u00b6 These genomes can be passed to the --spike_genome parameter. dmelr6.32 \u00b6 species: Drosophila melanogaster fasta: ${params.index_dir}/dmelr6.32/indexes/dmelr6.32.fa reference_index: ${params.index_dir}/dmelr6.32/indexes/bwa/Drosophila_melanogaster.* blacklist_index: ${params.index_dir}/dmelr6.32/indexes/blacklist/dmelr6.32.blacklist.* blacklist_bed: ${params.index_dir}/dmelr6.32/indexes/dm6-blacklist.v2.no_chr.bed.gz ecoli_k12 \u00b6 species: Escherichia coli K-12 fasta: ${params.index_dir}/ecoli_k12/indexes/ecoli_k12.fa reference_index: ${params.index_dir}/ecoli_k12/indexes/ecoli_k12.* blacklist_bed: NO_FILE Custom blacklist \u00b6 If you'd like to override the default blacklist used by one of the built-in genomes, you can provide a custom blacklist bed file or fasta file: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --genome hg38 \\ --blacklist /path/to/blacklist.bed If you're providing a custom blacklist bed file, make sure its regions refer to the genome version you're using. Custom reference genome \u00b6 If you'd like to use a genome not available on Biowulf, you can prepare a custom genome with the MAKE_REFERENCE entrypoint. If you'd like to use a custom genome, you'll need the following files: genome fasta genome GTF blacklist fasta Prepare your custom reference genome with: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ -entry MAKE_REFERENCE \\ --genome custom_genome \\ --genome_fasta genome.fasta \\ --genes_gtf genome.gtf \\ --blacklist blacklist.fasta The reference files and a config file for the genome will be written in results/genome/custom_genome/ . Then you can run champagne using your custom genome: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ --input samplesheet.csv \\ --genome custom_genome \\ -c results/genome/custom_genome/custom_genome.config","title":"Genomes"},{"location":"guide/genomes/#genomes","text":"","title":"Genomes"},{"location":"guide/genomes/#supported-reference-genomes","text":"These genomes are available on biowulf.","title":"Supported reference genomes"},{"location":"guide/genomes/#reference-genomes","text":"These genomes can be passed to the --genome parameter.","title":"Reference Genomes"},{"location":"guide/genomes/#hg38","text":"species: Homo sapiens fasta: ${params.index_dir}/hg38_basic/hg38_basic.fa genes_gtf: ${params.index_dir}/hg38_basic/genes.gtf blacklist_index: ${params.index_dir}/hg38_basic/indexes/blacklist/hg38.blacklist_v3.chrM.chr_rDNA.* reference_index: ${params.index_dir}/hg38_basic/bwa_index/hg38* chromosomes_dir: ${params.index_dir}/hg38_basic/Chromsomes/ chrom_sizes: ${params.index_dir}/hg38_basic/indexes/hg38.fa.sizes gene_info: ${params.index_dir}/hg38_basic/geneinfo.bed effective_genome_size: 2700000000 meme_motifs: ${projectDir}/assets/HOCOMOCOv11_core_HUMAN_mono_meme_format.tar.gz bioc_txdb: TxDb.Hsapiens.UCSC.hg38.knownGene bioc_annot: org.Hs.eg.db","title":"hg38"},{"location":"guide/genomes/#hg19","text":"species: Homo sapiens fasta: ${params.index_dir}/hg19_basic/hg19.fa genes_gtf: ${params.index_dir}/hg19_basic/genes.gtf blacklist_index: ${params.index_dir}/hg19_basic/indexes/blacklist/hg19.blacklist.* reference_index: ${params.index_dir}/hg19_basic/bwa_index/hg19.* chromosomes_dir: ${params.index_dir}/hg19_basic/Chromosomes chrom_sizes: ${params.index_dir}/hg19_basic/Chromosomes/chrom.sizes gene_info: ${params.index_dir}/hg19_basic/geneinfo.bed effective_genome_size: 2700000000 meme_motifs: ${projectDir}/assets/HOCOMOCOv11_core_HUMAN_mono_meme_format.tar.gz bioc_txdb: TxDb.Hsapiens.UCSC.hg38.knownGene bioc_annot: org.Hs.eg.db","title":"hg19"},{"location":"guide/genomes/#mm10","text":"species: Mus musculus fasta: ${params.index_dir}/mm10_basic/mm10_basic.fa genes_gtf: ${params.index_dir}/mm10_basic/genes.gtf blacklist_index: ${params.index_dir}/mm10_basic/indexes/blacklist/mm10.blacklist.chrM.chr_rDNA.* reference_index: ${params.index_dir}/mm10_basic/indexes/reference/mm10* chromosomes_dir: ${params.index_dir}/mm10_basic/Chromsomes/ chrom_sizes: ${params.index_dir}/mm10_basic/indexes/mm10.fa.sizes gene_info: ${params.index_dir}/mm10_basic/geneinfo.bed effective_genome_size: 2400000000 meme_motifs: ${projectDir}/assets/HOCOMOCOv11_core_MOUSE_mono_meme_format.tar.gz bioc_txdb: TxDb.Mmusculus.UCSC.mm10.knownGene bioc_annot: org.Mmu.eg.db","title":"mm10"},{"location":"guide/genomes/#spike-in-genomes","text":"These genomes can be passed to the --spike_genome parameter.","title":"Spike-in Genomes"},{"location":"guide/genomes/#dmelr632","text":"species: Drosophila melanogaster fasta: ${params.index_dir}/dmelr6.32/indexes/dmelr6.32.fa reference_index: ${params.index_dir}/dmelr6.32/indexes/bwa/Drosophila_melanogaster.* blacklist_index: ${params.index_dir}/dmelr6.32/indexes/blacklist/dmelr6.32.blacklist.* blacklist_bed: ${params.index_dir}/dmelr6.32/indexes/dm6-blacklist.v2.no_chr.bed.gz","title":"dmelr6.32"},{"location":"guide/genomes/#ecoli_k12","text":"species: Escherichia coli K-12 fasta: ${params.index_dir}/ecoli_k12/indexes/ecoli_k12.fa reference_index: ${params.index_dir}/ecoli_k12/indexes/ecoli_k12.* blacklist_bed: NO_FILE","title":"ecoli_k12"},{"location":"guide/genomes/#custom-blacklist","text":"If you'd like to override the default blacklist used by one of the built-in genomes, you can provide a custom blacklist bed file or fasta file: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ --genome hg38 \\ --blacklist /path/to/blacklist.bed If you're providing a custom blacklist bed file, make sure its regions refer to the genome version you're using.","title":"Custom blacklist"},{"location":"guide/genomes/#custom-reference-genome","text":"If you'd like to use a genome not available on Biowulf, you can prepare a custom genome with the MAKE_REFERENCE entrypoint. If you'd like to use a custom genome, you'll need the following files: genome fasta genome GTF blacklist fasta Prepare your custom reference genome with: champagne run --output /data/ $USER /champagne_project \\ --mode slurm \\ -entry MAKE_REFERENCE \\ --genome custom_genome \\ --genome_fasta genome.fasta \\ --genes_gtf genome.gtf \\ --blacklist blacklist.fasta The reference files and a config file for the genome will be written in results/genome/custom_genome/ . Then you can run champagne using your custom genome: champagne run --output /data/ $USER /champagne_project \\ --mode slurm -profile biowulf \\ --input samplesheet.csv \\ --genome custom_genome \\ -c results/genome/custom_genome/custom_genome.config","title":"Custom reference genome"},{"location":"guide/intro/","text":"Pipeline Overview \u00b6","title":"Intro"},{"location":"guide/intro/#pipeline-overview","text":"","title":"Pipeline Overview"},{"location":"guide/output/","text":"Output \u00b6 When you initialize champagne, the project output directory (specified with --output ) is populated with assets/ , conf/ , and nextflow.config . After running the pipeline, the output directory will also contain results/ , log/ , work/ , and submit_slurm.sh (if using --mode slurm ). /data/$USER/champagne_project \u251c\u2500\u2500 assets/ \u251c\u2500\u2500 conf/ \u251c\u2500\u2500 log/ \u251c\u2500\u2500 nextflow.config \u251c\u2500\u2500 results/ \u251c\u2500\u2500 submit_slurm.sh \u2514\u2500\u2500 work/ Directory Description assets/ Contains example sample sheets, contrasts, and other input files. conf/ Contains configuration files for the pipeline. log/ Contains log files for the pipeline run, including a slurm log if --mode slurm is used. nextflow.config The Nextflow configuration file for the pipeline. results/ Contains the results files from the pipeline run. submit_slurm.sh A script to submit the pipeline run to SLURM (only created if --mode slurm is used). work/ Contains the working directory for Nextflow. Results \u00b6 Workflow output files will be written to the results/ directory by default in your pipeline run output directory. For example, if you ran champagne with champagne run --output /data/$USER/champagne_project , the results files will be in /data/$USER/champagne_project/results/ . All paths listed below are relative to the results/ directory. Pipeline information \u00b6 pipeline_info/ contains information about the pipeline run. pipeline_info/bco.json is the BioCompute Object (BCO) for the pipeline run, which is a standardized format for sharing computational workflows and results. pipeline_info/dag.html is the DAG (Directed Acyclic Graph) of the pipeline run, which shows the workflow execution order and dependencies. The execution report , timeline , and trace file generated by Nextflow are also included in this directory and are named with the timestamp of the pipeline run. Quality Control \u00b6 qc/ contains all quality control files. MultiQC \u00b6 qc/multiqc/multiqc_report.html is the MultiQC report for the entire run, which summarizes the quality control results for all samples. Input files passed to multiqc are in qc/multiqc/input/ . fastQC \u00b6 qc/fastqc/raw and qc/fastqc/trimmed contain FastQC reports for raw and trimmed reads, respectively. deepTools \u00b6 qc/deeptools/ contains plots and intermediate files generated by deepTools, including QC metrics, PCA plots, scatter plots, and correlation heatmaps. Phantom Peak Qual Tools (PPQT) \u00b6 qc/phantompeakqualtools/ contains the PPQT reports and fragment lengths for each sample. Alignments \u00b6 align/bam/ contains the sorted and deduped BAM files for each sample. Bigwigs \u00b6 bigwigs/ contains the bigwig files for each sample; one before removing input reads ( {id}.bw ) and one with input reads removed ( {id}.inputnorm.bw ). These are normalized with the method set by the deeptools_normalize_samples parameter. If using a spike-in genome, these are normalized according the spike-in parameters set. See the Spike-in normalization doc for more details. Peaks \u00b6 peaks/{peak_caller}/ directories are created for each peak caller. Available peak callers are macs2_narrow , macs2_broad , gem , and sicer . See the run parameters and peak caller parameters for customization options. peaks/{peak_caller}/replicates/ contains called peaks for each sample. Differential analysis \u00b6 If any sample has only one replicate, manorm is used for differential analysis. Otherwise, diffbind is used. manorm results are in peaks/{peak_caller}/diff/manorm/{contrast}/ . diffbind results are in peaks/{peak_caller}/diff/diffbind/{contrast}/ . Consensus Peaks \u00b6 peaks/{peak_caller}/consensus/{consensus_method} contains the consensus peaks for each peak caller. Motifs \u00b6 peaks/{peak_caller}/consensus/{consensus_method}/motifs contains HOMER and MEME AME results. Homer results are in motifs/homer/ , organized with one directory per sample (e.g. {id}_homer/ ) and contain a background fasta, target fasta, results HTML, and a subdirectory containing motif files and logos. If the target and background fasta files from homer are not blank, they are used for MEME AME for motif enrichment analysis. These results files are in motifs/meme/ . Annotations \u00b6 peaks/{peak_caller}/consensus/{consensus_method}/annotations contains peak annotations from ChIPseeker. Custom Genome \u00b6 If you specified a custom genome with custom genome parameters , the prepared genome files will be in genome/{genome} . These include the genome BWA index, blacklist BWA index, and a nextflow config file to reuse the genome in future runs. Working Directory \u00b6 work/ is where Nextflow stores intermediate files during the pipeline run. If you resubmit the pipeline, the working directory will be reused so the pipeline can resume from where it previously stopped. After successfully completing the pipeline run, you can delete the working directory to save disk space.","title":"Output"},{"location":"guide/output/#output","text":"When you initialize champagne, the project output directory (specified with --output ) is populated with assets/ , conf/ , and nextflow.config . After running the pipeline, the output directory will also contain results/ , log/ , work/ , and submit_slurm.sh (if using --mode slurm ). /data/$USER/champagne_project \u251c\u2500\u2500 assets/ \u251c\u2500\u2500 conf/ \u251c\u2500\u2500 log/ \u251c\u2500\u2500 nextflow.config \u251c\u2500\u2500 results/ \u251c\u2500\u2500 submit_slurm.sh \u2514\u2500\u2500 work/ Directory Description assets/ Contains example sample sheets, contrasts, and other input files. conf/ Contains configuration files for the pipeline. log/ Contains log files for the pipeline run, including a slurm log if --mode slurm is used. nextflow.config The Nextflow configuration file for the pipeline. results/ Contains the results files from the pipeline run. submit_slurm.sh A script to submit the pipeline run to SLURM (only created if --mode slurm is used). work/ Contains the working directory for Nextflow.","title":"Output"},{"location":"guide/output/#results","text":"Workflow output files will be written to the results/ directory by default in your pipeline run output directory. For example, if you ran champagne with champagne run --output /data/$USER/champagne_project , the results files will be in /data/$USER/champagne_project/results/ . All paths listed below are relative to the results/ directory.","title":"Results"},{"location":"guide/output/#pipeline-information","text":"pipeline_info/ contains information about the pipeline run. pipeline_info/bco.json is the BioCompute Object (BCO) for the pipeline run, which is a standardized format for sharing computational workflows and results. pipeline_info/dag.html is the DAG (Directed Acyclic Graph) of the pipeline run, which shows the workflow execution order and dependencies. The execution report , timeline , and trace file generated by Nextflow are also included in this directory and are named with the timestamp of the pipeline run.","title":"Pipeline information"},{"location":"guide/output/#quality-control","text":"qc/ contains all quality control files.","title":"Quality Control"},{"location":"guide/output/#multiqc","text":"qc/multiqc/multiqc_report.html is the MultiQC report for the entire run, which summarizes the quality control results for all samples. Input files passed to multiqc are in qc/multiqc/input/ .","title":"MultiQC"},{"location":"guide/output/#fastqc","text":"qc/fastqc/raw and qc/fastqc/trimmed contain FastQC reports for raw and trimmed reads, respectively.","title":"fastQC"},{"location":"guide/output/#deeptools","text":"qc/deeptools/ contains plots and intermediate files generated by deepTools, including QC metrics, PCA plots, scatter plots, and correlation heatmaps.","title":"deepTools"},{"location":"guide/output/#phantom-peak-qual-tools-ppqt","text":"qc/phantompeakqualtools/ contains the PPQT reports and fragment lengths for each sample.","title":"Phantom Peak Qual Tools (PPQT)"},{"location":"guide/output/#alignments","text":"align/bam/ contains the sorted and deduped BAM files for each sample.","title":"Alignments"},{"location":"guide/output/#bigwigs","text":"bigwigs/ contains the bigwig files for each sample; one before removing input reads ( {id}.bw ) and one with input reads removed ( {id}.inputnorm.bw ). These are normalized with the method set by the deeptools_normalize_samples parameter. If using a spike-in genome, these are normalized according the spike-in parameters set. See the Spike-in normalization doc for more details.","title":"Bigwigs"},{"location":"guide/output/#peaks","text":"peaks/{peak_caller}/ directories are created for each peak caller. Available peak callers are macs2_narrow , macs2_broad , gem , and sicer . See the run parameters and peak caller parameters for customization options. peaks/{peak_caller}/replicates/ contains called peaks for each sample.","title":"Peaks"},{"location":"guide/output/#differential-analysis","text":"If any sample has only one replicate, manorm is used for differential analysis. Otherwise, diffbind is used. manorm results are in peaks/{peak_caller}/diff/manorm/{contrast}/ . diffbind results are in peaks/{peak_caller}/diff/diffbind/{contrast}/ .","title":"Differential analysis"},{"location":"guide/output/#consensus-peaks","text":"peaks/{peak_caller}/consensus/{consensus_method} contains the consensus peaks for each peak caller.","title":"Consensus Peaks"},{"location":"guide/output/#motifs","text":"peaks/{peak_caller}/consensus/{consensus_method}/motifs contains HOMER and MEME AME results. Homer results are in motifs/homer/ , organized with one directory per sample (e.g. {id}_homer/ ) and contain a background fasta, target fasta, results HTML, and a subdirectory containing motif files and logos. If the target and background fasta files from homer are not blank, they are used for MEME AME for motif enrichment analysis. These results files are in motifs/meme/ .","title":"Motifs"},{"location":"guide/output/#annotations","text":"peaks/{peak_caller}/consensus/{consensus_method}/annotations contains peak annotations from ChIPseeker.","title":"Annotations"},{"location":"guide/output/#custom-genome","text":"If you specified a custom genome with custom genome parameters , the prepared genome files will be in genome/{genome} . These include the genome BWA index, blacklist BWA index, and a nextflow config file to reuse the genome in future runs.","title":"Custom Genome"},{"location":"guide/output/#working-directory","text":"work/ is where Nextflow stores intermediate files during the pipeline run. If you resubmit the pipeline, the working directory will be reused so the pipeline can resume from where it previously stopped. After successfully completing the pipeline run, you can delete the working directory to save disk space.","title":"Working Directory"},{"location":"guide/params/","text":"How to set pipeline parameters \u00b6 Any parameter can be set via the CLI using two hyphens ( -- ) followed by the parameter name and value. For example: champagne run --output /data/ $USER /champagne_project \\ --input assets/samplesheet_full_mm10.csv \\ --contrasts assets/contrasts_full_mm10.csv \\ --genome mm10 \\ --run_gem false \\ --run_chipseeker false \\ --run_qc true Alternatively, you can create a YAML file with the parameters you want to set. This is useful for managing multiple parameters or for sharing configurations with others. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You can then use these parameters with the -params-file option: champagne run --output /data/ $USER /champagne_project \\ -params-file assets/params.yml View the full list of pipeline parameters below. CCBR/CHAMPAGNE pipeline parameters \u00b6 CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline Input/output options \u00b6 The most commonly used pipeline options Parameter Description Type Default Required Hidden input Path to comma-separated file containing information about the samples in the experiment. Help You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. string True contrasts Optional contrasts specification for differential analysis string genome Reference genome (e.g. hg38, mm10). This can be a genome in conf/genomes.config, or see 'Custom genome options' to build a custom reference from a fasta & gtf file. string True outputDir string ${launchDir}/results True tracedir string ${outputDir}/pipeline_info True publish_dir_mode How to publish files to the results directory. This parameter sets Nextflow's workflow.output.mode configuration option. string link Custom genome options \u00b6 Use these to build a custom reference genome not already listed in conf/genomes.config. For an example, see conf/test.config. Parameter Description Type Default Required Hidden genome_fasta Genome fasta file string genes_gtf Genome gtf file string blacklist Custom blacklisted sequences as a fasta file or bed file. These will be filtered out of the trimmed reads before aligning to the reference genome. string read_length Read length used for counting unique kmers and computing the effective genome size. integer rename_contigs File with map to translate chromosome names (see assets/R64-1-1_ensembl2UCSC.txt as an example) string General parameters \u00b6 Parameter Description Type Default Required Hidden max_memory string 224 GB max_cpus integer 32 max_time string 72 h align_min_quality integer 6 min_fragment_length integer 200 Spike-in options \u00b6 Options for experiments that use a spike-in genome Parameter Description Type Default Required Hidden spike_genome Optional spike-in genome (e.g. dmelr6.32, ecoli_k12). If null, spike-in normalization will not be performed. string spike_norm_method Method to compute scaling factors for spike-in normalization. \"guenther\" uses a simple fraction of the reads aligning to the spike-in genome as described in https://doi.org/10.1016/j.celrep.2014.10.018 . \"delorenzi\" uses deepTools multiBamSummary with --scalingFactors, which is similar to the method described in https://doi.org/10.1101/gr.168260.113 . string delorenzi spike_deeptools_bin_size When spike_norm_method is delorenzi, this sets --binSize in deepTools multiBamSummary integer 5000 spike_deeptools_min_map_quality When spike_norm_method is delorenzi, this sets --minMappingQuality in deepTools multiBamSummary integer 30 QC options \u00b6 Parameter Description Type Default Required Hidden deeptools_normalize_using This parameter has been renamed to \"deeptools_normalize_samples\". It is kept for backward compatibility. string RPGC True deeptools_normalize_samples This normalization method is applied to the samples only, not the inputs. If using a spike-in genome, recommend setting this to \"None\" string RPGC deeptools_normalize_input Normalization method applied to inputs only. This way you can disable additional normalization for samples such as when using spike-in normalization, but still normalize the inputs. string RPGC deeptools_bin_size integer 25 deeptools_smooth_length integer 75 deeptools_excluded_chroms string chrM chrX chrY multiqc_config string assets/multiqc_config.yaml multiqc_logo string assets/ccbr_logo.png Peak callers \u00b6 Parameter Description Type Default Required Hidden macs_narrow_q number 0.01 macs_broad_q number 0.01 macs_broad_cutoff number 0.01 gem_read_dists string assets/gem/Read_Distribution_default.txt gem_fold integer 3 gem_k_min integer 6 gem_k_max integer 13 sicer_species string motifs \u00b6 Parameter Description Type Default Required Hidden homer_de_novo boolean True homer_jaspar_db string assets/JASPAR2022_CORE_vertebrates_non-redundant_pfms_jaspar.txt run control \u00b6 Toggle various steps of the pipeline on/off Parameter Description Type Default Required Hidden run_qc boolean True run_deeptools boolean True run_normalize_input boolean True run_call_peaks boolean True run_gem boolean True run_sicer boolean True run_macs_broad boolean True run_macs_narrow boolean True run_normalize_peaks boolean run_chipseeker boolean run_homer boolean True run_meme boolean True run_consensus_union boolean True run_consensus_corces boolean True Platform options \u00b6 Options for the platform or HPC on which the pipeline is run. These are set by platform-specific profiles, e.g. conf/biowulf.config. If you are running the pipeline on biowulf, these will be set by CHAMPAGNE automatically. Parameter Description Type Default Required Hidden index_dir Absolute path to directory containing pre-built reference genomes. string fastq_screen_conf Path to the config file for fastq screen. See assets/fastq_screen_biowulf.conf as an example. string fastq_screen_db_dir Path to the directory containing fastq screen databases. string containers \u00b6 Parameter Description Type Default Required Hidden containers_base string nciccbr/ccbr_ubuntu_base_20.04:v6.1 containers_deeptools string nciccbr/ccbr_deeptools_3.5.3:v1 containers_fastqc string nciccbr/ccrgb_qctools:v4.0 containers_fastq_screen string nciccbr/ccbr_fastq_screen_0.14.1:v1.0 containers_frip string nciccbr/ccbr_frip:v1 containers_gem string nciccbr/ccbr_gem_3.4:v1 containers_macs2 string nciccbr/ccbr_macs2_2.2.9.1:v1 containers_multiqc string nciccbr/ccbr_multiqc_1.15:v1 containers_ngsqc string nciccbr/ccbr_ngsqc_0.31:v1 containers_phantom_peaks string quay.io/biocontainers/phantompeakqualtools:1.2.2--hdfd78af_1 containers_picard string nciccbr/ccbr_picard_2.27.5:v1 containers_preseq string nciccbr/ccbr_preseq_v2.0:v1 containers_r string nciccbr/ccbr_r_4.3.0:v1 containers_sicer string nciccbr/ccbr_sicer2_1.0.3:v1 Other parameters \u00b6 Parameter Description Type Default Required Hidden diffbind_report string assets/diffbind_report.Rmd True","title":"Parameters"},{"location":"guide/params/#how-to-set-pipeline-parameters","text":"Any parameter can be set via the CLI using two hyphens ( -- ) followed by the parameter name and value. For example: champagne run --output /data/ $USER /champagne_project \\ --input assets/samplesheet_full_mm10.csv \\ --contrasts assets/contrasts_full_mm10.csv \\ --genome mm10 \\ --run_gem false \\ --run_chipseeker false \\ --run_qc true Alternatively, you can create a YAML file with the parameters you want to set. This is useful for managing multiple parameters or for sharing configurations with others. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You can then use these parameters with the -params-file option: champagne run --output /data/ $USER /champagne_project \\ -params-file assets/params.yml View the full list of pipeline parameters below.","title":"How to set pipeline parameters"},{"location":"guide/params/#ccbrchampagne-pipeline-parameters","text":"CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline","title":"CCBR/CHAMPAGNE pipeline parameters"},{"location":"guide/params/#inputoutput-options","text":"The most commonly used pipeline options Parameter Description Type Default Required Hidden input Path to comma-separated file containing information about the samples in the experiment. Help You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. string True contrasts Optional contrasts specification for differential analysis string genome Reference genome (e.g. hg38, mm10). This can be a genome in conf/genomes.config, or see 'Custom genome options' to build a custom reference from a fasta & gtf file. string True outputDir string ${launchDir}/results True tracedir string ${outputDir}/pipeline_info True publish_dir_mode How to publish files to the results directory. This parameter sets Nextflow's workflow.output.mode configuration option. string link","title":"Input/output options"},{"location":"guide/params/#custom-genome-options","text":"Use these to build a custom reference genome not already listed in conf/genomes.config. For an example, see conf/test.config. Parameter Description Type Default Required Hidden genome_fasta Genome fasta file string genes_gtf Genome gtf file string blacklist Custom blacklisted sequences as a fasta file or bed file. These will be filtered out of the trimmed reads before aligning to the reference genome. string read_length Read length used for counting unique kmers and computing the effective genome size. integer rename_contigs File with map to translate chromosome names (see assets/R64-1-1_ensembl2UCSC.txt as an example) string","title":"Custom genome options"},{"location":"guide/params/#general-parameters","text":"Parameter Description Type Default Required Hidden max_memory string 224 GB max_cpus integer 32 max_time string 72 h align_min_quality integer 6 min_fragment_length integer 200","title":"General parameters"},{"location":"guide/params/#spike-in-options","text":"Options for experiments that use a spike-in genome Parameter Description Type Default Required Hidden spike_genome Optional spike-in genome (e.g. dmelr6.32, ecoli_k12). If null, spike-in normalization will not be performed. string spike_norm_method Method to compute scaling factors for spike-in normalization. \"guenther\" uses a simple fraction of the reads aligning to the spike-in genome as described in https://doi.org/10.1016/j.celrep.2014.10.018 . \"delorenzi\" uses deepTools multiBamSummary with --scalingFactors, which is similar to the method described in https://doi.org/10.1101/gr.168260.113 . string delorenzi spike_deeptools_bin_size When spike_norm_method is delorenzi, this sets --binSize in deepTools multiBamSummary integer 5000 spike_deeptools_min_map_quality When spike_norm_method is delorenzi, this sets --minMappingQuality in deepTools multiBamSummary integer 30","title":"Spike-in options"},{"location":"guide/params/#qc-options","text":"Parameter Description Type Default Required Hidden deeptools_normalize_using This parameter has been renamed to \"deeptools_normalize_samples\". It is kept for backward compatibility. string RPGC True deeptools_normalize_samples This normalization method is applied to the samples only, not the inputs. If using a spike-in genome, recommend setting this to \"None\" string RPGC deeptools_normalize_input Normalization method applied to inputs only. This way you can disable additional normalization for samples such as when using spike-in normalization, but still normalize the inputs. string RPGC deeptools_bin_size integer 25 deeptools_smooth_length integer 75 deeptools_excluded_chroms string chrM chrX chrY multiqc_config string assets/multiqc_config.yaml multiqc_logo string assets/ccbr_logo.png","title":"QC options"},{"location":"guide/params/#peak-callers","text":"Parameter Description Type Default Required Hidden macs_narrow_q number 0.01 macs_broad_q number 0.01 macs_broad_cutoff number 0.01 gem_read_dists string assets/gem/Read_Distribution_default.txt gem_fold integer 3 gem_k_min integer 6 gem_k_max integer 13 sicer_species string","title":"Peak callers"},{"location":"guide/params/#motifs","text":"Parameter Description Type Default Required Hidden homer_de_novo boolean True homer_jaspar_db string assets/JASPAR2022_CORE_vertebrates_non-redundant_pfms_jaspar.txt","title":"motifs"},{"location":"guide/params/#run-control","text":"Toggle various steps of the pipeline on/off Parameter Description Type Default Required Hidden run_qc boolean True run_deeptools boolean True run_normalize_input boolean True run_call_peaks boolean True run_gem boolean True run_sicer boolean True run_macs_broad boolean True run_macs_narrow boolean True run_normalize_peaks boolean run_chipseeker boolean run_homer boolean True run_meme boolean True run_consensus_union boolean True run_consensus_corces boolean True","title":"run control"},{"location":"guide/params/#platform-options","text":"Options for the platform or HPC on which the pipeline is run. These are set by platform-specific profiles, e.g. conf/biowulf.config. If you are running the pipeline on biowulf, these will be set by CHAMPAGNE automatically. Parameter Description Type Default Required Hidden index_dir Absolute path to directory containing pre-built reference genomes. string fastq_screen_conf Path to the config file for fastq screen. See assets/fastq_screen_biowulf.conf as an example. string fastq_screen_db_dir Path to the directory containing fastq screen databases. string","title":"Platform options"},{"location":"guide/params/#containers","text":"Parameter Description Type Default Required Hidden containers_base string nciccbr/ccbr_ubuntu_base_20.04:v6.1 containers_deeptools string nciccbr/ccbr_deeptools_3.5.3:v1 containers_fastqc string nciccbr/ccrgb_qctools:v4.0 containers_fastq_screen string nciccbr/ccbr_fastq_screen_0.14.1:v1.0 containers_frip string nciccbr/ccbr_frip:v1 containers_gem string nciccbr/ccbr_gem_3.4:v1 containers_macs2 string nciccbr/ccbr_macs2_2.2.9.1:v1 containers_multiqc string nciccbr/ccbr_multiqc_1.15:v1 containers_ngsqc string nciccbr/ccbr_ngsqc_0.31:v1 containers_phantom_peaks string quay.io/biocontainers/phantompeakqualtools:1.2.2--hdfd78af_1 containers_picard string nciccbr/ccbr_picard_2.27.5:v1 containers_preseq string nciccbr/ccbr_preseq_v2.0:v1 containers_r string nciccbr/ccbr_r_4.3.0:v1 containers_sicer string nciccbr/ccbr_sicer2_1.0.3:v1","title":"containers"},{"location":"guide/params/#other-parameters","text":"Parameter Description Type Default Required Hidden diffbind_report string assets/diffbind_report.Rmd True","title":"Other parameters"},{"location":"guide/spike-in/","text":"Spike-in normalization \u00b6 CHAMPAGNE supports ChIP-seq experiments that spike-in reads from alternate species. The data are normalized based on the number of reads aligning to the spike-in genome to account for differences in sequencing depth or other technical variations between samples. Samples are grouped by antibody when calculating the scaling factors. Inputs are excluded from this calculation. Spike-in options \u00b6 You must set the spike_genome parameter to the name of a supported genome (e.g. dmelr6.32 , ecoli_k12 ) that is different from the genome used for the main analysis. When using spike-in normalizations, we recommend setting deeptools_normalize_samples to None so that additional normalization isn't performed (see this discussion ). You can separately set the normalization method for input samples with the deeptools_normalize_input parameter. View the spike-in options for a full list of parameters that can be set for spike-in normalization. normalization method \u00b6 CHAMPAGNE implements two methods for spike-in normalization: delorenzi : This method uses deepTools multiBamSummary --scalingFactors to calculate the scaling factors, which is similar to the method described here: 10.1101/gr.168260.113 . To use this method, set the spike_norm_method parameter to delorenzi (default). guenther : This method is described in the supplementary material of 10.1016/j.celrep.2014.10.018 . Reads are scaled by the minimum number of reads aligning to the spike-in genome across all samples. To use this method, set the spike_norm_method parameter to guenther . Examples \u00b6 Using the delorenzi normalization method with E. coli as the spike-in genome: champagne run \\ --output /data/ $USER /champagne_project/ \\ --genome hg38 \\ --input assets/samplesheet_full_spikein.csv \\ --spike_genome ecoli_k12 \\ --deeptools_normalize_samples None \\ --spike_norm_method delorenzi Using the guenther normalization method with D. melanogaster as the spike-in genome: champagne run \\ --output /data/ $USER /champagne_project/ \\ --genome hg38 \\ --input assets/samplesheet_full_spikein.csv \\ --spike_genome dmelr6.32 \\ --deeptools_normalize_samples None \\ --spike_norm_method guenther","title":"Spike-in Normalization"},{"location":"guide/spike-in/#spike-in-normalization","text":"CHAMPAGNE supports ChIP-seq experiments that spike-in reads from alternate species. The data are normalized based on the number of reads aligning to the spike-in genome to account for differences in sequencing depth or other technical variations between samples. Samples are grouped by antibody when calculating the scaling factors. Inputs are excluded from this calculation.","title":"Spike-in normalization"},{"location":"guide/spike-in/#spike-in-options","text":"You must set the spike_genome parameter to the name of a supported genome (e.g. dmelr6.32 , ecoli_k12 ) that is different from the genome used for the main analysis. When using spike-in normalizations, we recommend setting deeptools_normalize_samples to None so that additional normalization isn't performed (see this discussion ). You can separately set the normalization method for input samples with the deeptools_normalize_input parameter. View the spike-in options for a full list of parameters that can be set for spike-in normalization.","title":"Spike-in options"},{"location":"guide/spike-in/#normalization-method","text":"CHAMPAGNE implements two methods for spike-in normalization: delorenzi : This method uses deepTools multiBamSummary --scalingFactors to calculate the scaling factors, which is similar to the method described here: 10.1101/gr.168260.113 . To use this method, set the spike_norm_method parameter to delorenzi (default). guenther : This method is described in the supplementary material of 10.1016/j.celrep.2014.10.018 . Reads are scaled by the minimum number of reads aligning to the spike-in genome across all samples. To use this method, set the spike_norm_method parameter to guenther .","title":"normalization method"},{"location":"guide/spike-in/#examples","text":"Using the delorenzi normalization method with E. coli as the spike-in genome: champagne run \\ --output /data/ $USER /champagne_project/ \\ --genome hg38 \\ --input assets/samplesheet_full_spikein.csv \\ --spike_genome ecoli_k12 \\ --deeptools_normalize_samples None \\ --spike_norm_method delorenzi Using the guenther normalization method with D. melanogaster as the spike-in genome: champagne run \\ --output /data/ $USER /champagne_project/ \\ --genome hg38 \\ --input assets/samplesheet_full_spikein.csv \\ --spike_genome dmelr6.32 \\ --deeptools_normalize_samples None \\ --spike_norm_method guenther","title":"Examples"},{"location":"guide/troubleshooting/","text":"Troubleshooting \u00b6 View the log file \u00b6 If you submitted the pipeline to slurm, there will be a slurm log file log/ with the name log/slurm_${SLURM_JOB_ID}.log . Otherwise, it will be printed to standard output and standard error in your terminal. Try resubmitting \u00b6 If you are running the pipeline on a cluster, try resubmitting the job. Sometimes jobs fail due to temporary issues with the cluster or resources. CHAMPAGNE uses -resume by default, so calling champagne run with the same options as your original run will resume the pipeline from where it left off, rather than starting over. If you do want to start over, use --forceall with champagne run . Getting Help \u00b6 If you think your issue is a bug , open an issue and include a minimal reproducible example. If you have a general question about the pipeline, ask it in discussions . General Inquiries and Collaboration: Please contact the CCBR Pipeliner team at CCBR_Pipeliner@mail.nih.gov .","title":"Troubleshooting"},{"location":"guide/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"guide/troubleshooting/#view-the-log-file","text":"If you submitted the pipeline to slurm, there will be a slurm log file log/ with the name log/slurm_${SLURM_JOB_ID}.log . Otherwise, it will be printed to standard output and standard error in your terminal.","title":"View the log file"},{"location":"guide/troubleshooting/#try-resubmitting","text":"If you are running the pipeline on a cluster, try resubmitting the job. Sometimes jobs fail due to temporary issues with the cluster or resources. CHAMPAGNE uses -resume by default, so calling champagne run with the same options as your original run will resume the pipeline from where it left off, rather than starting over. If you do want to start over, use --forceall with champagne run .","title":"Try resubmitting"},{"location":"guide/troubleshooting/#getting-help","text":"If you think your issue is a bug , open an issue and include a minimal reproducible example. If you have a general question about the pipeline, ask it in discussions . General Inquiries and Collaboration: Please contact the CCBR Pipeliner team at CCBR_Pipeliner@mail.nih.gov .","title":"Getting Help"},{"location":"guide/usage/","text":"Getting Started with CHAMPAGNE \u00b6 Installation \u00b6 For Biowulf users, CHAMPAGNE is installed in the ccbrpipeliner module. There's no need to perform any other installation steps. If you'd like to run the pipeline in a different execution environment, take a look at how to run the nextflow pipeline directly . CHAMPAGNE depends on Nextflow version 25 or later and Singularity or Docker. Biowulf \u00b6 Champagne is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session, then load the module: # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # load the ccbrpipeliner module module load ccbrpipeliner Help \u00b6 Run champagne --help to see the available commands and options. Usage: champagne [OPTIONS] COMMAND [ARGS]... CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline docs: https://ccbr.github.io/CHAMPAGNE For more options, run: champagne [command] --help Options: -v, --version Show the version and exit. --citation Print the citation in bibtex format and exit. -h, --help Show this message and exit. Commands: run Run the workflow init Initialize the launch directory Initialize \u00b6 Initialize your project directory: champagne init --output /data/ $USER /champagne_project Or if you do not use --output , your current working directory will be used as default: champagne init Prepare input files \u00b6 Sample manifest \u00b6 This file is a CSV file that contains information about the samples to be processed. It is passed to the input parameter. The following columns are required: sample : sample ID; does not need to be a unique column. rep : replicate number of sample ID; does not need to be a unique column. fastq_1 : absolute path to R1 of sample ID. fastq_2 : absolute path to R2 of sample ID (optional, only for paired-end reads). antibody : name of the antibody used for the sample. input : the sampleID of the input control; this must match a sample in the sheet. Example for a single-end project: samplesheet.csv sample,rep,fastq_1,fastq_2,antibody,control sampleA,1,/path/to/sample_1.R1.fastq.gz,,Ab,inputA sampleA,2,/path/to/sample_2.R1.fastq.gz,,Ab,inputA inputA,1,/path/to/sample1.R1.fastq.gz,,, inputA,2,/path/to/sample1.R1.fastq.gz,,, Example for a paired-end project: samplesheet.csv sample,rep,fastq_1,fastq_2,antibody,control sample1,1,/path/to/sample_1.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,Ab,input1 sample1,2,/path/to/sample_2.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,Ab,input1 input1,1,/path/to/input_1.R1.fastq.gz,/path/to/input_1.R2.fastq.gz,, input1,2,/path/to/input_2.R1.fastq.gz,/path/to/input_2.R2.fastq.gz,, For more examples, view the sample sheet files in the assets/ directory on GitHub . Contrasts (optional) \u00b6 Contrasts are specified as a TSV file and is passed to the contrasts parameter. Each row is a unique contrast for differential analysis. Columns: contrast_name : name of the contrast. Must be unique and contain no spaces. group1 : comma-separated list of sample IDs in group 1. group2 : comma-separated list of sample IDs in group 2. The following is an example contrast file with two contrasts assets/contrasts_full_mm10.tsv contrast_name group1 group2 antibody CTCF_ChIP_macrophage_p20,CTCF_ChIP_MEF_p20 CTCF_ChIP_macrophage_p3 celltype_macrophage_vs_fibroblast CTCF_ChIP_macrophage_p20,CTCF_ChIP_macrophage_p3 CTCF_ChIP_MEF_p20 The sample sheet for this dataset contains all of the sample IDs specified in the contrasts file. assets/samplesheet_full_mm10.csv sample,rep,fastq_1,fastq_2,antibody,input CTCF_ChIP_macrophage_p20,1,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081748_1.fastq.gz,,CTCF,WCE_p20 CTCF_ChIP_macrophage_p20,2,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081749_1.fastq.gz,,CTCF,WCE_p20 CTCF_ChIP_macrophage_p3,1,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081750_1.fastq.gz,,CTCF,WCE_p3 CTCF_ChIP_macrophage_p3,2,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081751_1.fastq.gz,,CTCF,WCE_p3 CTCF_ChIP_MEF_p20,1,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081752_1.fastq.gz,,CTCF,WCE_p20 CTCF_ChIP_MEF_p20,2,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081753_1.fastq.gz,,CTCF,WCE_p20 WCE_p3,,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081772_1.fastq.gz,,, WCE_p20,,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081773_1.fastq.gz,,, Parameters file (optional) \u00b6 you can create a YAML file with the parameters you want to set. This is useful for managing multiple parameters or for sharing configurations with others. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You will then pass this file to the -params-file option when running the pipeline: champagne run --output /data/ $USER /champagne_project \\ -params-file assets/params.yml Run \u00b6 champagne run is the main command to run the pipeline. Here's the output of champagne run --help : Usage: champagne run [OPTIONS] [NEXTFLOW_ARGS]... Run the workflow Note: you must first run `champagne init --output <output_dir>` to initialize the output directory. docs: https://ccbr.github.io/CHAMPAGNE Options: --output DIRECTORY Output directory path for champagne init & run. Equivalent to nextflow launchDir. Defaults to your current working directory. --mode TEXT Run mode (slurm, local) [default: slurm] -F, --forceall Force all processes to run (i.e. do not use nextflow -resume) -h, --help Show this message and exit. Nextflow options: -profile <profile> Nextflow profile to use (e.g. test) -params-file <file> Nextflow params file to use (e.g. assets/params.yml) -preview Preview the processes that will run without executing them EXAMPLES: Execute with slurm: champagne run --output path/to/outdir --mode slurm Preview the processes that will run: champagne run .--output path/to/outdir --mode local -preview Add nextflow args (anything supported by `nextflow run`): champagne run --output path/to/outdir --mode slurm -profile test champagne run --output path/to/outdir --mode slurm -profile test -params-file assets/params.yml Any nextflow argument can also be passed to champagne run, such as -profile , -preview , or -params-file . These are always prepended with a single hyphen. Pipeline parameters can also be passed via the command line. These are always prepended with a double-hyphen. Preview \u00b6 Run a local preview: champagne run \\ --output /data/ $USER /champagne_project \\ --input assets/samplesheet_test_mm10.csv \\ --contrasts assets/contrasts_test_mm10.tsv \\ --genome mm10 \\ --mode local \\ -preview Stub run \u00b6 Launch a local stub run to view processes that will run, output blank files, and download containers: champagne run \\ --output /data/ $USER /champagne_project \\ --input assets/samplesheet_test_mm10.csv \\ --contrasts assets/contrasts_test_mm10.tsv \\ --genome mm10 \\ --mode local \\ -stub Run with slurm \u00b6 Launch a pipeline run with slurm: champagne run \\ --output /data/ $USER /champagne_project \\ --input assets/samplesheet_test_mm10.csv \\ --contrasts assets/contrasts_test_mm10.tsv \\ --genome mm10 \\ --mode slurm","title":"Usage"},{"location":"guide/usage/#getting-started-with-champagne","text":"","title":"Getting Started with CHAMPAGNE"},{"location":"guide/usage/#installation","text":"For Biowulf users, CHAMPAGNE is installed in the ccbrpipeliner module. There's no need to perform any other installation steps. If you'd like to run the pipeline in a different execution environment, take a look at how to run the nextflow pipeline directly . CHAMPAGNE depends on Nextflow version 25 or later and Singularity or Docker.","title":"Installation"},{"location":"guide/usage/#biowulf","text":"Champagne is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session, then load the module: # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # load the ccbrpipeliner module module load ccbrpipeliner","title":"Biowulf"},{"location":"guide/usage/#help","text":"Run champagne --help to see the available commands and options. Usage: champagne [OPTIONS] COMMAND [ARGS]... CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline docs: https://ccbr.github.io/CHAMPAGNE For more options, run: champagne [command] --help Options: -v, --version Show the version and exit. --citation Print the citation in bibtex format and exit. -h, --help Show this message and exit. Commands: run Run the workflow init Initialize the launch directory","title":"Help"},{"location":"guide/usage/#initialize","text":"Initialize your project directory: champagne init --output /data/ $USER /champagne_project Or if you do not use --output , your current working directory will be used as default: champagne init","title":"Initialize"},{"location":"guide/usage/#prepare-input-files","text":"","title":"Prepare input files"},{"location":"guide/usage/#sample-manifest","text":"This file is a CSV file that contains information about the samples to be processed. It is passed to the input parameter. The following columns are required: sample : sample ID; does not need to be a unique column. rep : replicate number of sample ID; does not need to be a unique column. fastq_1 : absolute path to R1 of sample ID. fastq_2 : absolute path to R2 of sample ID (optional, only for paired-end reads). antibody : name of the antibody used for the sample. input : the sampleID of the input control; this must match a sample in the sheet. Example for a single-end project: samplesheet.csv sample,rep,fastq_1,fastq_2,antibody,control sampleA,1,/path/to/sample_1.R1.fastq.gz,,Ab,inputA sampleA,2,/path/to/sample_2.R1.fastq.gz,,Ab,inputA inputA,1,/path/to/sample1.R1.fastq.gz,,, inputA,2,/path/to/sample1.R1.fastq.gz,,, Example for a paired-end project: samplesheet.csv sample,rep,fastq_1,fastq_2,antibody,control sample1,1,/path/to/sample_1.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,Ab,input1 sample1,2,/path/to/sample_2.R1.fastq.gz,/path/to/sample_1.R2.fastq.gz,Ab,input1 input1,1,/path/to/input_1.R1.fastq.gz,/path/to/input_1.R2.fastq.gz,, input1,2,/path/to/input_2.R1.fastq.gz,/path/to/input_2.R2.fastq.gz,, For more examples, view the sample sheet files in the assets/ directory on GitHub .","title":"Sample manifest"},{"location":"guide/usage/#contrasts-optional","text":"Contrasts are specified as a TSV file and is passed to the contrasts parameter. Each row is a unique contrast for differential analysis. Columns: contrast_name : name of the contrast. Must be unique and contain no spaces. group1 : comma-separated list of sample IDs in group 1. group2 : comma-separated list of sample IDs in group 2. The following is an example contrast file with two contrasts assets/contrasts_full_mm10.tsv contrast_name group1 group2 antibody CTCF_ChIP_macrophage_p20,CTCF_ChIP_MEF_p20 CTCF_ChIP_macrophage_p3 celltype_macrophage_vs_fibroblast CTCF_ChIP_macrophage_p20,CTCF_ChIP_macrophage_p3 CTCF_ChIP_MEF_p20 The sample sheet for this dataset contains all of the sample IDs specified in the contrasts file. assets/samplesheet_full_mm10.csv sample,rep,fastq_1,fastq_2,antibody,input CTCF_ChIP_macrophage_p20,1,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081748_1.fastq.gz,,CTCF,WCE_p20 CTCF_ChIP_macrophage_p20,2,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081749_1.fastq.gz,,CTCF,WCE_p20 CTCF_ChIP_macrophage_p3,1,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081750_1.fastq.gz,,CTCF,WCE_p3 CTCF_ChIP_macrophage_p3,2,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081751_1.fastq.gz,,CTCF,WCE_p3 CTCF_ChIP_MEF_p20,1,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081752_1.fastq.gz,,CTCF,WCE_p20 CTCF_ChIP_MEF_p20,2,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081753_1.fastq.gz,,CTCF,WCE_p20 WCE_p3,,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081772_1.fastq.gz,,, WCE_p20,,/data/CCBR_Pipeliner/testdata/chipseq/SRR3081773_1.fastq.gz,,,","title":"Contrasts (optional)"},{"location":"guide/usage/#parameters-file-optional","text":"you can create a YAML file with the parameters you want to set. This is useful for managing multiple parameters or for sharing configurations with others. Here's an example YAML file with some common parameters: assets/params.yml input : './assets/samplesheet_full_mm10.csv' contrasts : './assets/contrasts_full_mm10.csv' genome : mm10 run_gem : false run_chipseeker : false run_qc : true You will then pass this file to the -params-file option when running the pipeline: champagne run --output /data/ $USER /champagne_project \\ -params-file assets/params.yml","title":"Parameters file (optional)"},{"location":"guide/usage/#run","text":"champagne run is the main command to run the pipeline. Here's the output of champagne run --help : Usage: champagne run [OPTIONS] [NEXTFLOW_ARGS]... Run the workflow Note: you must first run `champagne init --output <output_dir>` to initialize the output directory. docs: https://ccbr.github.io/CHAMPAGNE Options: --output DIRECTORY Output directory path for champagne init & run. Equivalent to nextflow launchDir. Defaults to your current working directory. --mode TEXT Run mode (slurm, local) [default: slurm] -F, --forceall Force all processes to run (i.e. do not use nextflow -resume) -h, --help Show this message and exit. Nextflow options: -profile <profile> Nextflow profile to use (e.g. test) -params-file <file> Nextflow params file to use (e.g. assets/params.yml) -preview Preview the processes that will run without executing them EXAMPLES: Execute with slurm: champagne run --output path/to/outdir --mode slurm Preview the processes that will run: champagne run .--output path/to/outdir --mode local -preview Add nextflow args (anything supported by `nextflow run`): champagne run --output path/to/outdir --mode slurm -profile test champagne run --output path/to/outdir --mode slurm -profile test -params-file assets/params.yml Any nextflow argument can also be passed to champagne run, such as -profile , -preview , or -params-file . These are always prepended with a single hyphen. Pipeline parameters can also be passed via the command line. These are always prepended with a double-hyphen.","title":"Run"},{"location":"guide/usage/#preview","text":"Run a local preview: champagne run \\ --output /data/ $USER /champagne_project \\ --input assets/samplesheet_test_mm10.csv \\ --contrasts assets/contrasts_test_mm10.tsv \\ --genome mm10 \\ --mode local \\ -preview","title":"Preview"},{"location":"guide/usage/#stub-run","text":"Launch a local stub run to view processes that will run, output blank files, and download containers: champagne run \\ --output /data/ $USER /champagne_project \\ --input assets/samplesheet_test_mm10.csv \\ --contrasts assets/contrasts_test_mm10.tsv \\ --genome mm10 \\ --mode local \\ -stub","title":"Stub run"},{"location":"guide/usage/#run-with-slurm","text":"Launch a pipeline run with slurm: champagne run \\ --output /data/ $USER /champagne_project \\ --input assets/samplesheet_test_mm10.csv \\ --contrasts assets/contrasts_test_mm10.tsv \\ --genome mm10 \\ --mode slurm","title":"Run with slurm"}]}
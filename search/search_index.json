{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#champagne","title":"CHAMPAGNE \ud83c\udf7e","text":"<p>CH**rom**A**tin i**M**muno **P**recipit**A**tion sequencin**G a**N**alysis pip**E**line</p> <p> </p> <p>\ud83d\udea7 This project is under active development. It is not yet ready for production use. \ud83d\udea7</p>"},{"location":"#set-up","title":"Set up","text":"<p>Champagne is installed on the Biowulf HPC. For installation in other execution environments, refer to the docs.</p>"},{"location":"#biowulf","title":"Biowulf","text":"<p>Champagne is available on Biowulf in the <code>ccbrpipeliner</code> module. You'll first need to start an interactive session and create a directory from where you'll run champagne.</p> <pre><code># start an interactive node\nsinteractive --mem=2g --cpus-per-task=2 --gres=lscratch:200\n# make a working directory for your project and go to it\nmkdir -p /data/$USER/chipseq\ncd /data/$USER/chipseq\n# load the ccbrpipeliener module\nmodule load ccbrpipeliner\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Initialize and run champagne with test data:</p> <pre><code># copy the champagne config files to your current directory\nchampagne init\n# preview the champagne jobs that will run with the test dataset\nchampagne run --mode local -profile test -preview\n# launch a champagne run on slurm with the test dataset\nchampagne run --mode slurm -profile test,biowulf\n</code></pre> <p>To run champagne on your own data, you'll need to create a sample sheet. Take a look at these examples:</p> <ul> <li>assets/samplesheet_test.csv - mix of single and paired end reads downloaded from github.</li> <li>assets/samplesheet_mm10.csv - single end reads on biowulf.</li> </ul> <p>Once you've created a samplesheet with paths to your fastq files, run champagne with the <code>--input</code> option to specify the path to your sample sheet:</p> <pre><code>champagne run --mode slurm -profile biowulf --input samplesheet.csv --genome hg38\n</code></pre> <p>We currently support the hg38 and mm10 genomes. If you'd like to use a custom genome, you'll need the following files:</p> <ul> <li>genome fasta</li> <li>genome GTF</li> <li>blacklist fasta</li> </ul> <p>Prepare your custom reference genome with:</p> <pre><code>champagne run --mode slurm -profile biowulf \\\n-entry MAKE_REFERENCE \\\n--outdir custom_genome \\\n--genome custom_genome \\\n--genome_fasta genome.fasta \\\n--genes_gtf genome.gtf \\\n--blacklist blacklist.fasta\n</code></pre> <p>The reference files and a config file for the genome will be written in <code>custom_genome/genome</code>.</p> <p>Then you can run champagne using your custom genome:</p> <pre><code>champagne run --mode slurm -profile biowulf \\\n--input samplesheet.csv \\\n--genome custom_genome \\\n-c custom_genome/genome/custom_genome.config\n</code></pre>"},{"location":"#help-contributing","title":"Help &amp; Contributing","text":"<p>Come across a bug? Open an issue and include a minimal reproducible example.</p> <p>Have a question? Ask it in discussions.</p> <p>Want to contribute to this project? Check out the contributing guidelines.</p>"},{"location":"#references","title":"References","text":"<p>This repo was originally generated from the CCBR Nextflow Template. The template takes inspiration from nektool1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions2.</p> <p>Information on who the pipeline was developed for, and a statement if it's only been tested on Biowulf. For example:</p> <p>It has been developed and tested solely on NIH HPC Biowulf.</p> <p>Also include a workflow image to summarize the pipeline.</p> <ol> <li> <p>nektool https://github.com/beardymcjohnface/nektool \u21a9</p> </li> <li> <p>instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#development-version","title":"development version","text":""},{"location":"changelog/#new-features","title":"New features","text":"<ul> <li>Find motifs in the genome with Homer. (#142)</li> <li>Run motif enrichment analysis with MEME. (#142)</li> <li>Annotate peaks with chipseeker. (#142,#147,#157)</li> <li>Add preseq complexity curve and fastq screen to multiqc report. (#147)</li> <li>Print the recommended citation in bibtex format with <code>champagne --citation</code>. (#153)</li> <li>Support multiple replicates per sample and call consensus peaks on replicates. (#129)</li> <li>Optionally normalize p-values with the CCBR/consensus_peaks subworkflow.</li> <li>Implement differential peak calling. (#158)</li> <li>Optionally specify contrasts via a YAML file. If no file is specified, differential analysis is not performed.</li> <li>If any sample has only one replicate, run <code>MAnorm</code>, otherwise run <code>diffbind</code>.</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix deepTools plots (#144):</li> <li>Per sample fingerprint plots instead of per replicate.</li> <li>Input normalized profile plots.</li> <li>Protein-coding-only versions of plots.</li> <li>Ensure sample IDs are sorted. (#150)</li> <li>Fix a bug where the wrong SICER output file was used for downstream analyses. (#155)</li> </ul>"},{"location":"changelog/#champagne-022","title":"CHAMPAGNE 0.2.2","text":"<ul> <li>Fix permissions issues in the CLI. (#167)</li> </ul>"},{"location":"changelog/#champagne-021","title":"CHAMPAGNE 0.2.1","text":"<ul> <li>Fix a bug in QC stats that mixed up the statistics for different samples. (#125)</li> <li>Fix a bug in the CLI that added the <code>-profile</code> to the nextflow command even if it wasn't needed (#125).</li> <li>Report read counts between blacklist &amp; filtering steps in the QC table. (#125)</li> <li>Run spooker on workflow completion (#126).</li> </ul>"},{"location":"changelog/#champagne-020","title":"CHAMPAGNE 0.2.0","text":""},{"location":"changelog/#new-features_1","title":"New features","text":"<ul> <li>Implement peak calling with sicer2, macs2, and gem. (#52)</li> <li>Add parameter options to skip QC, input normalization, and/or peak calling steps. (#72)</li> <li>Calculate and plot QC metrics for called peaks:</li> <li>Fraction in Peaks (FRiP) (#89)</li> <li>Jaccard index (#92)</li> <li>Histogram of peak widths (#92)</li> <li>Add support for paired-end reads. (#105)</li> <li>Add an option to use a custom reference from a genome fasta, gtf, and blacklist file. (#105)</li> <li>Champagne CLI: (#112)</li> <li>New <code>--mode</code> option for <code>champagne run</code> to execute the workflow locally ('local') or submit it as a slurm job ('slurm').</li> <li>Option to override the path to the champagne <code>main.nf</code> file or specify the github repo (<code>CCBR/CHAMPAGNE</code>) instead.     <pre><code># use the default path\nchampagne run ...\n# override the path\nchampagne run path/to/champagne/main.nf\n# use a revision from github instead\nchampagne run CCBR/CHAMPAGNE -r v0.1.0\n</code></pre></li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>CLI:</li> <li>Error when biowulf-specific environment variables are not defined. (#54)</li> <li>The host is now correctly detected as biowulf via <code>scontrol</code>. (#75)</li> <li>Containers:</li> <li>Containers are now specified in process definitions instead of <code>withName</code>/<code>withLabel</code> for better control. (#69)<ul> <li>Shared containers are specified as parameters in the config file <code>conf/containers.config</code>.</li> </ul> </li> <li>No longer use <code>--mount type=bind</code> or <code>--volume</code> for making directories available to processes in containers. Instead, use Nextflow's <code>Channel.fromPath</code> constructor with <code>type: 'dir'</code>. (#71)</li> </ul>"},{"location":"changelog/#api-breaking-changes","title":"API-breaking changes","text":"<ul> <li>An error is thrown when a required input file doesn't exist. (#71)</li> <li>Previously, the workflow quietly didn't run the process(es) that required the missing file.</li> <li>Renamed <code>champagne config</code> to <code>champagne init</code> to avoid clashing with <code>nextflow config</code>. (#112)</li> </ul>"},{"location":"changelog/#champagne-010","title":"CHAMPAGNE 0.1.0","text":""},{"location":"changelog/#quality-control-steps-implemented-for-single-end-reads","title":"Quality control steps implemented for single-end reads","text":"<ul> <li>Trim raw reads, FastQC on raw and trimmed reads, and FastQ Screen on trimmed reads.</li> <li>Exclude reads that align to blacklist regions, align remaining reads to the reference genome, and deduplicate.</li> <li>Preseq on aligned reads.</li> <li>Phantompeakqualtools on aligned and deduplicated reads.</li> <li>Process reads with deepTools: bam coverage to generate bigwigs for each sample, summarize all bigwigs, and compute matrices relative to TSSs and scaled to metagene regions.</li> <li>Generate plots with deepTools: PCA, profile, heatmap, spearman correlation, and fingerprint plots.</li> <li>Summarize all quality control steps in a MultiQC report.</li> <li>Input-normalize ChIP fragments for the next stage of the pipeline.</li> </ul>"},{"location":"contributing/","title":"Contributing to CHAMPAGNE","text":"<p>TODO -- describe gitflow, require PRs...</p>"},{"location":"contributing/#use-pre-commit-hooks","title":"Use pre-commit hooks","text":"<p>Pre-commit can automatically format your code, check for spelling errors, etc. every time you commit.</p> <p>Install pre-commit if you haven't already, then run <code>pre-commit install</code> to install the hooks specified in <code>.pre-commit-config.yaml</code>. Pre-commit will run the hooks every time you commit.</p>"},{"location":"contributing/#versions","title":"Versions","text":"<p>Increment the version number following semantic versioning1 in the <code>VERSION</code> file.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>Keep the changelog up to date with all notable changes in <code>CHANGELOG.md</code>2.</p>"},{"location":"contributing/#vs-code-extensions","title":"VS code extensions","text":"<p>If you use VS code, installing nf-core extension pack is recommended.</p>"},{"location":"contributing/#installation","title":"Installation","text":"<p>For testing and debugging, We recommend installing the dev version of champagne to a user-specific location.</p> <pre><code>git clone https://github.com/CCBR/CHAMPAGNE\nmkdir -p ~/bin/champagne\npip install ./CHAMPAGNE -t ~/bin/champagne\nexport PATH=\"$HOME/bin/champagne/bin:$PATH\"\n</code></pre> <ol> <li> <p>semantic versioning guidelines https://semver.org/ \u21a9</p> </li> <li> <p>changelog guidelines: https://keepachangelog.com/en/1.1.0/ \u21a9</p> </li> </ol>"},{"location":"contributors/","title":"Contributors","text":"<p>Should include a list of all contributors, including GitHub handles when appropriate. In addition, a statement of who contributed to the source code specifically, identified by initials. An example is included below.</p> <p>TODO: populate this automagically similar to https://nf-co.re/contributors? or link to GitHub contributor page? could use gh action: https://github.com/lowlighter/metrics/blob/master/source/plugins/contributors/README.md</p>"},{"location":"contributors/#contributions","title":"Contributions","text":"<p>The following members contributed to the development of the CARLISLE pipeline:</p> <ul> <li>Samantha Sevilla</li> </ul> <p>SS contributed to the generating the source code and all members contributed to the main concepts and analysis.</p>"},{"location":"getting-started/","title":"Getting Started with CHAMPAGNE","text":"<p>TODO intro paragraph</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>CHAMPAGNE is installed on the Biowulf and FRCE clusters as part of the <code>ccbrpipeliner</code> module. If you'd like to run the pipeline in a different execution environment, take a look at how to run the nextflow pipeline directly.</p>"},{"location":"getting-started/#prepare-a-sample-sheet","title":"Prepare a sample sheet","text":"<p>TODO</p>"},{"location":"getting-started/#initialize","title":"Initialize","text":"<p>Copy the configuration files to your current working directory</p> <pre><code>champagne init\n</code></pre>"},{"location":"getting-started/#run","title":"Run","text":"<p>TODO preview, stub, mode=slurm</p> <p>TODO required params</p> <p>Run preview to view processes that will run:</p> <pre><code>champagne run -profile test -preview\n</code></pre> <p>Launch a stub run to view processes that will run and download containers:</p> <pre><code>champagne run -profile test,singularity -stub\n</code></pre> <p>Run the test dataset using the test profile:</p> <pre><code>champagne run -profile test,singularity\n</code></pre> <p>or explicitly specify the output directory and input:</p> <pre><code>champagne run -profile singularity --outdir results/test --input assets/samplesheet_test.csv\n</code></pre>"},{"location":"getting-started/#custom-reference-genome","title":"Custom reference genome","text":"<p>TODO different required params</p> <p>Create and use a custom reference genome:</p> <pre><code>champagne run -profile test -entry MAKE_REFERENCE\nchampagne run -profile test -c results/test/genome/custom_genome.config\n</code></pre>"},{"location":"nextflow/","title":"nextflow pipeline","text":"<p>You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run <code>champagne init</code> first, as the config files will be accessed directly from the GitHub repo.</p> <pre><code>nextflow run CCBR/CHAMPAGNE -profile test,singularity\n</code></pre> <p>You can specify a specific version, tag, or branch with <code>-r</code>:</p> <pre><code>nextflow run CCBR/CHAMPAGNE -r v1.0.0 -profile test,singularity\n</code></pre> <p>Create and use a custom reference genome:</p> <pre><code>nextflow run CCBR/CHAMPAGNE -profile test -entry MAKE_REFERENCE\nnextflow run CCBR/CHAMPAGNE -profile test -c results/test/genome/custom_genome.config\n</code></pre>"},{"location":"release-guide/","title":"Release Guide","text":""},{"location":"release-guide/#how-to-test-a-pre-release-on-biowulf","title":"How to test a pre-release on biowulf","text":"<p>Install the development version of champagne.</p> <pre><code># activate the conda env for development\n. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n\n# go to the source on biowulf and update\ncd /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/champagne-dev\ngit pull\n# optionally switch to different branch if needed\n\n# install the version to a hidden path (e.g. .dev, .v1.0.0.9000) in /data/CCBR_Pipeliner/Pipelines/CHAMPAGNE\ncd ..\npip install ./champagne-dev -t ./.dev\n# add it to your PATH and PYTHONPATH with:\nexport PATH=\"$PATH:/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/bin/\"\nexport PYTHONPATH=\"$PYTHONPATH:/data/CCBR_Pipeliner/Pipelines/CHAMPAGNE/.dev/\"\n</code></pre>"}]}